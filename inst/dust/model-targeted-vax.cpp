// Generated by odin2 (version 0.1.10) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(model_targeted_vax)]]
// [[dust2::time_type(discrete)]]
// [[dust2::has_compare()]]
class model_targeted_vax {
public:
  model_targeted_vax() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct dim_type {
      dust2::array::dimensions<2> daily_doses_value;
      dust2::array::dimensions<1> daily_doses_time;
      dust2::array::dimensions<1> daily_doses_t;
      dust2::array::dimensions<2> prioritisation_strategy;
      dust2::array::dimensions<2> target_met_t;
      dust2::array::dimensions<1> n_eligible_for_dose1;
      dust2::array::dimensions<1> n_eligible_for_dose2;
      dust2::array::dimensions<1> vaccine_uptake;
      dust2::array::dimensions<2> N;
      dust2::array::dimensions<2> S;
      dust2::array::dimensions<2> S0;
      dust2::array::dimensions<2> p_SE;
      dust2::array::dimensions<2> n_SEa;
      dust2::array::dimensions<2> Ea;
      dust2::array::dimensions<2> Ea0;
      dust2::array::dimensions<2> Eb0;
      dust2::array::dimensions<2> delta_Ea;
      dust2::array::dimensions<2> n_EaEb;
      dust2::array::dimensions<2> Eb;
      dust2::array::dimensions<2> delta_Eb;
      dust2::array::dimensions<2> n_EbI;
      dust2::array::dimensions<2> n_EbId;
      dust2::array::dimensions<2> n_EbIr;
      dust2::array::dimensions<2> E;
      dust2::array::dimensions<2> Ir0;
      dust2::array::dimensions<2> Ir;
      dust2::array::dimensions<2> delta_Ir;
      dust2::array::dimensions<2> n_IrR;
      dust2::array::dimensions<2> Id0;
      dust2::array::dimensions<2> Id;
      dust2::array::dimensions<2> delta_Id;
      dust2::array::dimensions<2> n_IdD;
      dust2::array::dimensions<2> I;
      dust2::array::dimensions<2> R;
      dust2::array::dimensions<2> R0;
      dust2::array::dimensions<2> delta_R;
      dust2::array::dimensions<2> D;
      dust2::array::dimensions<2> D0;
      dust2::array::dimensions<2> delta_D;
      dust2::array::dimensions<2> lambda;
      dust2::array::dimensions<2> m_gen_pop;
      dust2::array::dimensions<2> m_sex;
      dust2::array::dimensions<2> I_infectious;
      dust2::array::dimensions<1> prop_infectious;
      dust2::array::dimensions<2> s_ij_gen_pop;
      dust2::array::dimensions<2> s_ij_sex;
      dust2::array::dimensions<1> beta_z;
      dust2::array::dimensions<2> CFR;
      dust2::array::dimensions<1> ve_T;
      dust2::array::dimensions<1> ve_I;
      dust2::array::dimensions<2> n_vaccination_t_S;
      dust2::array::dimensions<2> n_vaccination_t_Ea;
      dust2::array::dimensions<2> n_vaccination_t_Eb;
      dust2::array::dimensions<2> n_vaccination_t_R;
      dust2::array::dimensions<2> delta_S_n_vaccination;
      dust2::array::dimensions<2> delta_Ea_n_vaccination;
      dust2::array::dimensions<2> delta_Eb_n_vaccination;
      dust2::array::dimensions<2> delta_R_n_vaccination;
    } dim;
    struct offset_type {
      struct {
        size_t prioritisation_step_1st_dose;
        size_t prioritisation_step_2nd_dose;
        size_t cases_inc;
        size_t deaths_inc;
        size_t cases_cumulative;
        size_t deaths_cumulative;
        size_t cases_inc_00_04;
        size_t cases_inc_05_14;
        size_t cases_inc_15_plus;
        size_t cases_inc_PBS;
        size_t cases_inc_SW;
        size_t cases_inc_HCW;
        size_t deaths_inc_00_04;
        size_t deaths_inc_05_14;
        size_t deaths_inc_15_plus;
        size_t deaths_inc_PBS;
        size_t deaths_inc_SW;
        size_t deaths_inc_HCW;
        size_t cases_cumulative_00_04;
        size_t cases_cumulative_05_14;
        size_t cases_cumulative_15_plus;
        size_t cases_cumulative_PBS;
        size_t cases_cumulative_SW;
        size_t cases_cumulative_HCW;
        size_t deaths_cumulative_00_04;
        size_t deaths_cumulative_05_14;
        size_t deaths_cumulative_15_plus;
        size_t deaths_cumulative_PBS;
        size_t deaths_cumulative_SW;
        size_t deaths_cumulative_HCW;
        size_t vax_given_S;
        size_t vax_given_Ea;
        size_t vax_given_Eb;
        size_t vax_given_R;
        size_t vax_1stdose_given_S;
        size_t vax_1stdose_given_Ea;
        size_t vax_1stdose_given_Eb;
        size_t vax_1stdose_given_R;
        size_t vax_2nddose_given_S;
        size_t vax_2nddose_given_Ea;
        size_t vax_2nddose_given_Eb;
        size_t vax_2nddose_given_R;
        size_t S_tot;
        size_t E_tot;
        size_t I_tot;
        size_t R_tot;
        size_t D_tot;
        size_t N_tot;
        size_t total_vax;
        size_t total_vax_1stdose;
        size_t total_vax_2nddose;
        size_t S;
        size_t Ea;
        size_t Eb;
        size_t Ir;
        size_t Id;
        size_t R;
        size_t D;
        size_t E;
        size_t I;
        size_t N;
      } state;
    } offset;
    int N_prioritisation_steps;
    real_type vaccination_coverage_target_1st_dose_prop;
    real_type vaccination_coverage_target_2nd_dose_prop;
    real_type beta_h;
    real_type beta_s;
    real_type gamma_E;
    real_type gamma_Ir;
    real_type gamma_Id;
    int n_vax;
    int n_group;
    real_type exp_noise;
    std::vector<real_type> daily_doses_value;
    std::vector<real_type> daily_doses_time;
    dust2::interpolate::InterpolateConstantArray<real_type, 1> interpolate_daily_doses_t;
    std::vector<real_type> prioritisation_strategy;
    std::vector<real_type> vaccine_uptake;
    std::vector<real_type> m_gen_pop;
    std::vector<real_type> m_sex;
    std::vector<real_type> S0;
    std::vector<real_type> Ea0;
    std::vector<real_type> Eb0;
    std::vector<real_type> Ir0;
    std::vector<real_type> Id0;
    std::vector<real_type> R0;
    std::vector<real_type> D0;
    std::vector<real_type> beta_z;
    std::vector<real_type> CFR;
    std::vector<real_type> ve_T;
    std::vector<real_type> ve_I;
  };
  struct internal_state {
    std::vector<real_type> n_IrR;
    std::vector<real_type> n_IdD;
    std::vector<real_type> target_met_t;
    std::vector<real_type> n_eligible_for_dose1;
    std::vector<real_type> n_eligible_for_dose2;
    std::vector<real_type> I_infectious;
    std::vector<real_type> delta_R;
    std::vector<real_type> delta_D;
    std::vector<real_type> daily_doses_t;
    std::vector<real_type> n_vaccination_t_S;
    std::vector<real_type> n_vaccination_t_Ea;
    std::vector<real_type> n_vaccination_t_Eb;
    std::vector<real_type> n_vaccination_t_R;
    std::vector<real_type> prop_infectious;
    std::vector<real_type> delta_S_n_vaccination;
    std::vector<real_type> delta_Ea_n_vaccination;
    std::vector<real_type> delta_Eb_n_vaccination;
    std::vector<real_type> delta_R_n_vaccination;
    std::vector<real_type> s_ij_gen_pop;
    std::vector<real_type> s_ij_sex;
    std::vector<real_type> lambda;
    std::vector<real_type> n_EaEb;
    std::vector<real_type> n_EbI;
    std::vector<real_type> p_SE;
    std::vector<real_type> n_EbId;
    std::vector<real_type> delta_Eb;
    std::vector<real_type> n_SEa;
    std::vector<real_type> n_EbIr;
    std::vector<real_type> delta_Id;
    std::vector<real_type> delta_Ea;
    std::vector<real_type> delta_Ir;
  };
  struct data_type {
    real_type cases;
    real_type cases_00_04;
    real_type cases_05_14;
    real_type cases_15_plus;
    real_type deaths;
    real_type deaths_00_04;
    real_type deaths_05_14;
    real_type deaths_15_plus;
  };
  static dust2::packing packing_state(const shared_state& shared) {
    return dust2::packing{
      {"prioritisation_step_1st_dose", {}},
      {"prioritisation_step_2nd_dose", {}},
      {"cases_inc", {}},
      {"deaths_inc", {}},
      {"cases_cumulative", {}},
      {"deaths_cumulative", {}},
      {"cases_inc_00_04", {}},
      {"cases_inc_05_14", {}},
      {"cases_inc_15_plus", {}},
      {"cases_inc_PBS", {}},
      {"cases_inc_SW", {}},
      {"cases_inc_HCW", {}},
      {"deaths_inc_00_04", {}},
      {"deaths_inc_05_14", {}},
      {"deaths_inc_15_plus", {}},
      {"deaths_inc_PBS", {}},
      {"deaths_inc_SW", {}},
      {"deaths_inc_HCW", {}},
      {"cases_cumulative_00_04", {}},
      {"cases_cumulative_05_14", {}},
      {"cases_cumulative_15_plus", {}},
      {"cases_cumulative_PBS", {}},
      {"cases_cumulative_SW", {}},
      {"cases_cumulative_HCW", {}},
      {"deaths_cumulative_00_04", {}},
      {"deaths_cumulative_05_14", {}},
      {"deaths_cumulative_15_plus", {}},
      {"deaths_cumulative_PBS", {}},
      {"deaths_cumulative_SW", {}},
      {"deaths_cumulative_HCW", {}},
      {"vax_given_S", {}},
      {"vax_given_Ea", {}},
      {"vax_given_Eb", {}},
      {"vax_given_R", {}},
      {"vax_1stdose_given_S", {}},
      {"vax_1stdose_given_Ea", {}},
      {"vax_1stdose_given_Eb", {}},
      {"vax_1stdose_given_R", {}},
      {"vax_2nddose_given_S", {}},
      {"vax_2nddose_given_Ea", {}},
      {"vax_2nddose_given_Eb", {}},
      {"vax_2nddose_given_R", {}},
      {"S_tot", {}},
      {"E_tot", {}},
      {"I_tot", {}},
      {"R_tot", {}},
      {"D_tot", {}},
      {"N_tot", {}},
      {"total_vax", {}},
      {"total_vax_1stdose", {}},
      {"total_vax_2nddose", {}},
      {"S", std::vector<size_t>(shared.dim.S.dim.begin(), shared.dim.S.dim.end())},
      {"Ea", std::vector<size_t>(shared.dim.Ea.dim.begin(), shared.dim.Ea.dim.end())},
      {"Eb", std::vector<size_t>(shared.dim.Eb.dim.begin(), shared.dim.Eb.dim.end())},
      {"Ir", std::vector<size_t>(shared.dim.Ir.dim.begin(), shared.dim.Ir.dim.end())},
      {"Id", std::vector<size_t>(shared.dim.Id.dim.begin(), shared.dim.Id.dim.end())},
      {"R", std::vector<size_t>(shared.dim.R.dim.begin(), shared.dim.R.dim.end())},
      {"D", std::vector<size_t>(shared.dim.D.dim.begin(), shared.dim.D.dim.end())},
      {"E", std::vector<size_t>(shared.dim.E.dim.begin(), shared.dim.E.dim.end())},
      {"I", std::vector<size_t>(shared.dim.I.dim.begin(), shared.dim.I.dim.end())},
      {"N", std::vector<size_t>(shared.dim.N.dim.begin(), shared.dim.N.dim.end())}
    };
  }
  static dust2::packing packing_gradient(const shared_state& shared) {
    return dust2::packing{
    };
  }
  static shared_state build_shared(cpp11::list parameters) {
    const auto dim_daily_doses_value = dust2::r::read_dimensions<2>(parameters, "daily_doses_value");
    const auto dim_daily_doses_time = dust2::r::read_dimensions<1>(parameters, "daily_doses_time");
    const int N_prioritisation_steps = dust2::r::read_int(parameters, "N_prioritisation_steps");
    const real_type vaccination_coverage_target_1st_dose_prop = dust2::r::read_real(parameters, "vaccination_coverage_target_1st_dose_prop");
    const real_type vaccination_coverage_target_2nd_dose_prop = dust2::r::read_real(parameters, "vaccination_coverage_target_2nd_dose_prop");
    const real_type beta_h = dust2::r::read_real(parameters, "beta_h");
    const real_type beta_s = dust2::r::read_real(parameters, "beta_s");
    const real_type gamma_E = dust2::r::read_real(parameters, "gamma_E");
    const real_type gamma_Ir = dust2::r::read_real(parameters, "gamma_Ir");
    const real_type gamma_Id = dust2::r::read_real(parameters, "gamma_Id");
    const int n_vax = dust2::r::read_int(parameters, "n_vax");
    const int n_group = dust2::r::read_int(parameters, "n_group");
    const real_type exp_noise = dust2::r::read_real(parameters, "exp_noise", 1e+06);
    std::vector<real_type> daily_doses_value(dim_daily_doses_value.size);
    dust2::r::read_real_array(parameters, dim_daily_doses_value, daily_doses_value.data(), "daily_doses_value", true);
    std::vector<real_type> daily_doses_time(dim_daily_doses_time.size);
    dust2::r::read_real_array(parameters, dim_daily_doses_time, daily_doses_time.data(), "daily_doses_time", true);
    const dust2::array::dimensions<1> dim_daily_doses_t{static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_prioritisation_strategy{static_cast<size_t>(n_group), static_cast<size_t>(N_prioritisation_steps)};
    const dust2::array::dimensions<2> dim_target_met_t{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<1> dim_n_eligible_for_dose1{static_cast<size_t>(n_group)};
    const dust2::array::dimensions<1> dim_n_eligible_for_dose2{static_cast<size_t>(n_group)};
    const dust2::array::dimensions<1> dim_vaccine_uptake{static_cast<size_t>(n_group)};
    const dust2::array::dimensions<2> dim_N{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_S{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_S0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_p_SE{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_SEa{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Ea{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Ea0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Eb0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_Ea{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_EaEb{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Eb{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_Eb{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_EbI{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_EbId{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_EbIr{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_E{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Ir0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Ir{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_Ir{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_IrR{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Id0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_Id{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_Id{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_IdD{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_I{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_R{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_R0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_R{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_D{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_D0{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_D{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_lambda{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_m_gen_pop{static_cast<size_t>(n_group), static_cast<size_t>(n_group)};
    const dust2::array::dimensions<2> dim_m_sex{static_cast<size_t>(n_group), static_cast<size_t>(n_group)};
    const dust2::array::dimensions<2> dim_I_infectious{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<1> dim_prop_infectious{static_cast<size_t>(n_group)};
    const dust2::array::dimensions<2> dim_s_ij_gen_pop{static_cast<size_t>(n_group), static_cast<size_t>(n_group)};
    const dust2::array::dimensions<2> dim_s_ij_sex{static_cast<size_t>(n_group), static_cast<size_t>(n_group)};
    const dust2::array::dimensions<1> dim_beta_z{static_cast<size_t>(n_group)};
    const dust2::array::dimensions<2> dim_CFR{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<1> dim_ve_T{static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<1> dim_ve_I{static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_vaccination_t_S{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_vaccination_t_Ea{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_vaccination_t_Eb{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_n_vaccination_t_R{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_S_n_vaccination{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_Ea_n_vaccination{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_Eb_n_vaccination{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const dust2::array::dimensions<2> dim_delta_R_n_vaccination{static_cast<size_t>(n_group), static_cast<size_t>(n_vax)};
    const auto interpolate_daily_doses_t = dust2::interpolate::InterpolateConstantArray<real_type, 1>(daily_doses_time, daily_doses_value, dim_daily_doses_t, "daily_doses_time", "daily_doses_value");
    std::vector<real_type> prioritisation_strategy(dim_prioritisation_strategy.size);
    dust2::r::read_real_array(parameters, dim_prioritisation_strategy, prioritisation_strategy.data(), "prioritisation_strategy", true);
    std::vector<real_type> vaccine_uptake(dim_vaccine_uptake.size);
    dust2::r::read_real_array(parameters, dim_vaccine_uptake, vaccine_uptake.data(), "vaccine_uptake", true);
    std::vector<real_type> m_gen_pop(dim_m_gen_pop.size);
    dust2::r::read_real_array(parameters, dim_m_gen_pop, m_gen_pop.data(), "m_gen_pop", true);
    std::vector<real_type> m_sex(dim_m_sex.size);
    dust2::r::read_real_array(parameters, dim_m_sex, m_sex.data(), "m_sex", true);
    std::vector<real_type> S0(dim_S0.size);
    dust2::r::read_real_array(parameters, dim_S0, S0.data(), "S0", true);
    std::vector<real_type> Ea0(dim_Ea0.size);
    dust2::r::read_real_array(parameters, dim_Ea0, Ea0.data(), "Ea0", true);
    std::vector<real_type> Eb0(dim_Eb0.size);
    dust2::r::read_real_array(parameters, dim_Eb0, Eb0.data(), "Eb0", true);
    std::vector<real_type> Ir0(dim_Ir0.size);
    dust2::r::read_real_array(parameters, dim_Ir0, Ir0.data(), "Ir0", true);
    std::vector<real_type> Id0(dim_Id0.size);
    dust2::r::read_real_array(parameters, dim_Id0, Id0.data(), "Id0", true);
    std::vector<real_type> R0(dim_R0.size);
    dust2::r::read_real_array(parameters, dim_R0, R0.data(), "R0", true);
    std::vector<real_type> D0(dim_D0.size);
    dust2::r::read_real_array(parameters, dim_D0, D0.data(), "D0", true);
    std::vector<real_type> beta_z(dim_beta_z.size);
    dust2::r::read_real_array(parameters, dim_beta_z, beta_z.data(), "beta_z", true);
    std::vector<real_type> CFR(dim_CFR.size);
    dust2::r::read_real_array(parameters, dim_CFR, CFR.data(), "CFR", true);
    std::vector<real_type> ve_T(dim_ve_T.size);
    dust2::r::read_real_array(parameters, dim_ve_T, ve_T.data(), "ve_T", true);
    std::vector<real_type> ve_I(dim_ve_I.size);
    dust2::r::read_real_array(parameters, dim_ve_I, ve_I.data(), "ve_I", true);
    const shared_state::dim_type dim{dim_daily_doses_value, dim_daily_doses_time, dim_daily_doses_t, dim_prioritisation_strategy, dim_target_met_t, dim_n_eligible_for_dose1, dim_n_eligible_for_dose2, dim_vaccine_uptake, dim_N, dim_S, dim_S0, dim_p_SE, dim_n_SEa, dim_Ea, dim_Ea0, dim_Eb0, dim_delta_Ea, dim_n_EaEb, dim_Eb, dim_delta_Eb, dim_n_EbI, dim_n_EbId, dim_n_EbIr, dim_E, dim_Ir0, dim_Ir, dim_delta_Ir, dim_n_IrR, dim_Id0, dim_Id, dim_delta_Id, dim_n_IdD, dim_I, dim_R, dim_R0, dim_delta_R, dim_D, dim_D0, dim_delta_D, dim_lambda, dim_m_gen_pop, dim_m_sex, dim_I_infectious, dim_prop_infectious, dim_s_ij_gen_pop, dim_s_ij_sex, dim_beta_z, dim_CFR, dim_ve_T, dim_ve_I, dim_n_vaccination_t_S, dim_n_vaccination_t_Ea, dim_n_vaccination_t_Eb, dim_n_vaccination_t_R, dim_delta_S_n_vaccination, dim_delta_Ea_n_vaccination, dim_delta_Eb_n_vaccination, dim_delta_R_n_vaccination};
    shared_state::offset_type offset;
    offset.state.prioritisation_step_1st_dose = 0;
    offset.state.prioritisation_step_2nd_dose = 1;
    offset.state.cases_inc = 2;
    offset.state.deaths_inc = 3;
    offset.state.cases_cumulative = 4;
    offset.state.deaths_cumulative = 5;
    offset.state.cases_inc_00_04 = 6;
    offset.state.cases_inc_05_14 = 7;
    offset.state.cases_inc_15_plus = 8;
    offset.state.cases_inc_PBS = 9;
    offset.state.cases_inc_SW = 10;
    offset.state.cases_inc_HCW = 11;
    offset.state.deaths_inc_00_04 = 12;
    offset.state.deaths_inc_05_14 = 13;
    offset.state.deaths_inc_15_plus = 14;
    offset.state.deaths_inc_PBS = 15;
    offset.state.deaths_inc_SW = 16;
    offset.state.deaths_inc_HCW = 17;
    offset.state.cases_cumulative_00_04 = 18;
    offset.state.cases_cumulative_05_14 = 19;
    offset.state.cases_cumulative_15_plus = 20;
    offset.state.cases_cumulative_PBS = 21;
    offset.state.cases_cumulative_SW = 22;
    offset.state.cases_cumulative_HCW = 23;
    offset.state.deaths_cumulative_00_04 = 24;
    offset.state.deaths_cumulative_05_14 = 25;
    offset.state.deaths_cumulative_15_plus = 26;
    offset.state.deaths_cumulative_PBS = 27;
    offset.state.deaths_cumulative_SW = 28;
    offset.state.deaths_cumulative_HCW = 29;
    offset.state.vax_given_S = 30;
    offset.state.vax_given_Ea = 31;
    offset.state.vax_given_Eb = 32;
    offset.state.vax_given_R = 33;
    offset.state.vax_1stdose_given_S = 34;
    offset.state.vax_1stdose_given_Ea = 35;
    offset.state.vax_1stdose_given_Eb = 36;
    offset.state.vax_1stdose_given_R = 37;
    offset.state.vax_2nddose_given_S = 38;
    offset.state.vax_2nddose_given_Ea = 39;
    offset.state.vax_2nddose_given_Eb = 40;
    offset.state.vax_2nddose_given_R = 41;
    offset.state.S_tot = 42;
    offset.state.E_tot = 43;
    offset.state.I_tot = 44;
    offset.state.R_tot = 45;
    offset.state.D_tot = 46;
    offset.state.N_tot = 47;
    offset.state.total_vax = 48;
    offset.state.total_vax_1stdose = 49;
    offset.state.total_vax_2nddose = 50;
    offset.state.S = 51;
    offset.state.Ea = 51 + dim_S.size;
    offset.state.Eb = offset.state.Ea + dim_Ea.size;
    offset.state.Ir = offset.state.Eb + dim_Eb.size;
    offset.state.Id = offset.state.Ir + dim_Ir.size;
    offset.state.R = offset.state.Id + dim_Id.size;
    offset.state.D = offset.state.R + dim_R.size;
    offset.state.E = offset.state.D + dim_D.size;
    offset.state.I = offset.state.E + dim_E.size;
    offset.state.N = offset.state.I + dim_I.size;
    return shared_state{dim, offset, N_prioritisation_steps, vaccination_coverage_target_1st_dose_prop, vaccination_coverage_target_2nd_dose_prop, beta_h, beta_s, gamma_E, gamma_Ir, gamma_Id, n_vax, n_group, exp_noise, daily_doses_value, daily_doses_time, interpolate_daily_doses_t, prioritisation_strategy, vaccine_uptake, m_gen_pop, m_sex, S0, Ea0, Eb0, Ir0, Id0, R0, D0, beta_z, CFR, ve_T, ve_I};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> n_IrR(shared.dim.n_IrR.size);
    std::vector<real_type> n_IdD(shared.dim.n_IdD.size);
    std::vector<real_type> target_met_t(shared.dim.target_met_t.size);
    std::vector<real_type> n_eligible_for_dose1(shared.dim.n_eligible_for_dose1.size);
    std::vector<real_type> n_eligible_for_dose2(shared.dim.n_eligible_for_dose2.size);
    std::vector<real_type> I_infectious(shared.dim.I_infectious.size);
    std::vector<real_type> delta_R(shared.dim.delta_R.size);
    std::vector<real_type> delta_D(shared.dim.delta_D.size);
    std::vector<real_type> daily_doses_t(shared.dim.daily_doses_t.size);
    std::vector<real_type> n_vaccination_t_S(shared.dim.n_vaccination_t_S.size);
    std::vector<real_type> n_vaccination_t_Ea(shared.dim.n_vaccination_t_Ea.size);
    std::vector<real_type> n_vaccination_t_Eb(shared.dim.n_vaccination_t_Eb.size);
    std::vector<real_type> n_vaccination_t_R(shared.dim.n_vaccination_t_R.size);
    std::vector<real_type> prop_infectious(shared.dim.prop_infectious.size);
    std::vector<real_type> delta_S_n_vaccination(shared.dim.delta_S_n_vaccination.size);
    std::vector<real_type> delta_Ea_n_vaccination(shared.dim.delta_Ea_n_vaccination.size);
    std::vector<real_type> delta_Eb_n_vaccination(shared.dim.delta_Eb_n_vaccination.size);
    std::vector<real_type> delta_R_n_vaccination(shared.dim.delta_R_n_vaccination.size);
    std::vector<real_type> s_ij_gen_pop(shared.dim.s_ij_gen_pop.size);
    std::vector<real_type> s_ij_sex(shared.dim.s_ij_sex.size);
    std::vector<real_type> lambda(shared.dim.lambda.size);
    std::vector<real_type> n_EaEb(shared.dim.n_EaEb.size);
    std::vector<real_type> n_EbI(shared.dim.n_EbI.size);
    std::vector<real_type> p_SE(shared.dim.p_SE.size);
    std::vector<real_type> n_EbId(shared.dim.n_EbId.size);
    std::vector<real_type> delta_Eb(shared.dim.delta_Eb.size);
    std::vector<real_type> n_SEa(shared.dim.n_SEa.size);
    std::vector<real_type> n_EbIr(shared.dim.n_EbIr.size);
    std::vector<real_type> delta_Id(shared.dim.delta_Id.size);
    std::vector<real_type> delta_Ea(shared.dim.delta_Ea.size);
    std::vector<real_type> delta_Ir(shared.dim.delta_Ir.size);
    return internal_state{n_IrR, n_IdD, target_met_t, n_eligible_for_dose1, n_eligible_for_dose2, I_infectious, delta_R, delta_D, daily_doses_t, n_vaccination_t_S, n_vaccination_t_Ea, n_vaccination_t_Eb, n_vaccination_t_R, prop_infectious, delta_S_n_vaccination, delta_Ea_n_vaccination, delta_Eb_n_vaccination, delta_R_n_vaccination, s_ij_gen_pop, s_ij_sex, lambda, n_EaEb, n_EbI, p_SE, n_EbId, delta_Eb, n_SEa, n_EbIr, delta_Id, delta_Ea, delta_Ir};
  }
  static data_type build_data(cpp11::list data, const shared_state& shared) {
    auto cases = dust2::r::read_real(data, "cases", NA_REAL);
    auto cases_00_04 = dust2::r::read_real(data, "cases_00_04", NA_REAL);
    auto cases_05_14 = dust2::r::read_real(data, "cases_05_14", NA_REAL);
    auto cases_15_plus = dust2::r::read_real(data, "cases_15_plus", NA_REAL);
    auto deaths = dust2::r::read_real(data, "deaths", NA_REAL);
    auto deaths_00_04 = dust2::r::read_real(data, "deaths_00_04", NA_REAL);
    auto deaths_05_14 = dust2::r::read_real(data, "deaths_05_14", NA_REAL);
    auto deaths_15_plus = dust2::r::read_real(data, "deaths_15_plus", NA_REAL);
    return data_type{cases, cases_00_04, cases_05_14, cases_15_plus, deaths, deaths_00_04, deaths_05_14, deaths_15_plus};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.vaccination_coverage_target_1st_dose_prop = dust2::r::read_real(parameters, "vaccination_coverage_target_1st_dose_prop", shared.vaccination_coverage_target_1st_dose_prop);
    shared.vaccination_coverage_target_2nd_dose_prop = dust2::r::read_real(parameters, "vaccination_coverage_target_2nd_dose_prop", shared.vaccination_coverage_target_2nd_dose_prop);
    shared.beta_h = dust2::r::read_real(parameters, "beta_h", shared.beta_h);
    shared.beta_s = dust2::r::read_real(parameters, "beta_s", shared.beta_s);
    shared.gamma_E = dust2::r::read_real(parameters, "gamma_E", shared.gamma_E);
    shared.gamma_Ir = dust2::r::read_real(parameters, "gamma_Ir", shared.gamma_Ir);
    shared.gamma_Id = dust2::r::read_real(parameters, "gamma_Id", shared.gamma_Id);
    shared.exp_noise = dust2::r::read_real(parameters, "exp_noise", shared.exp_noise);
    dust2::r::read_real_array(parameters, shared.dim.prioritisation_strategy, shared.prioritisation_strategy.data(), "prioritisation_strategy", false);
    dust2::r::read_real_array(parameters, shared.dim.vaccine_uptake, shared.vaccine_uptake.data(), "vaccine_uptake", false);
    dust2::r::read_real_array(parameters, shared.dim.m_gen_pop, shared.m_gen_pop.data(), "m_gen_pop", false);
    dust2::r::read_real_array(parameters, shared.dim.m_sex, shared.m_sex.data(), "m_sex", false);
    dust2::r::read_real_array(parameters, shared.dim.S0, shared.S0.data(), "S0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ea0, shared.Ea0.data(), "Ea0", false);
    dust2::r::read_real_array(parameters, shared.dim.Eb0, shared.Eb0.data(), "Eb0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ir0, shared.Ir0.data(), "Ir0", false);
    dust2::r::read_real_array(parameters, shared.dim.Id0, shared.Id0.data(), "Id0", false);
    dust2::r::read_real_array(parameters, shared.dim.R0, shared.R0.data(), "R0", false);
    dust2::r::read_real_array(parameters, shared.dim.D0, shared.D0.data(), "D0", false);
    dust2::r::read_real_array(parameters, shared.dim.beta_z, shared.beta_z.data(), "beta_z", false);
    dust2::r::read_real_array(parameters, shared.dim.CFR, shared.CFR.data(), "CFR", false);
    dust2::r::read_real_array(parameters, shared.dim.ve_T, shared.ve_T.data(), "ve_T", false);
    dust2::r::read_real_array(parameters, shared.dim.ve_I, shared.ve_I.data(), "ve_I", false);
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    state[0] = 1;
    state[1] = 1;
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.S.mult[1]) + 51] = shared.S0[i - 1 + (j - 1) * (shared.dim.S0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ea.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.Ea.mult[1]) + shared.offset.state.Ea] = shared.Ea0[i - 1 + (j - 1) * (shared.dim.Ea0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Eb.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.Eb.mult[1]) + shared.offset.state.Eb] = shared.Eb0[i - 1 + (j - 1) * (shared.dim.Eb0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ir.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.Ir.mult[1]) + shared.offset.state.Ir] = shared.Ir0[i - 1 + (j - 1) * (shared.dim.Ir0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Id.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.Id.mult[1]) + shared.offset.state.Id] = shared.Id0[i - 1 + (j - 1) * (shared.dim.Id0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.R.mult[1]) + shared.offset.state.R] = shared.R0[i - 1 + (j - 1) * (shared.dim.R0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.D.mult[1]) + shared.offset.state.D] = shared.D0[i - 1 + (j - 1) * (shared.dim.D0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.E.mult[1]) + shared.offset.state.E] = shared.Ea0[i - 1 + (j - 1) * (shared.dim.Ea0.mult[1])] + shared.Eb0[i - 1 + (j - 1) * (shared.dim.Eb0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.I.mult[1]) + shared.offset.state.I] = shared.Ir0[i - 1 + (j - 1) * (shared.dim.Ir0.mult[1])] + shared.Id0[i - 1 + (j - 1) * (shared.dim.Id0.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.N.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.N.dim[1]; ++j) {
        state[i - 1 + (j - 1) * (shared.dim.N.mult[1]) + shared.offset.state.N] = shared.S0[i - 1 + (j - 1) * (shared.dim.S0.mult[1])] + shared.Ea0[i - 1 + (j - 1) * (shared.dim.Ea0.mult[1])] + shared.Eb0[i - 1 + (j - 1) * (shared.dim.Eb0.mult[1])] + shared.Ir0[i - 1 + (j - 1) * (shared.dim.Ir0.mult[1])] + shared.Id0[i - 1 + (j - 1) * (shared.dim.Id0.mult[1])] + shared.R0[i - 1 + (j - 1) * (shared.dim.R0.mult[1])] + shared.D0[i - 1 + (j - 1) * (shared.dim.D0.mult[1])];
      }
    }
    state[2] = 0;
    state[3] = 0;
    state[4] = 0;
    state[5] = 0;
    state[6] = 0;
    state[7] = 0;
    state[8] = 0;
    state[9] = 0;
    state[10] = 0;
    state[11] = 0;
    state[12] = 0;
    state[13] = 0;
    state[14] = 0;
    state[15] = 0;
    state[16] = 0;
    state[17] = 0;
    state[18] = 0;
    state[19] = 0;
    state[20] = 0;
    state[21] = 0;
    state[22] = 0;
    state[23] = 0;
    state[24] = 0;
    state[25] = 0;
    state[26] = 0;
    state[27] = 0;
    state[28] = 0;
    state[29] = 0;
    state[30] = 0;
    state[31] = 0;
    state[32] = 0;
    state[33] = 0;
    state[34] = 0;
    state[35] = 0;
    state[36] = 0;
    state[37] = 0;
    state[38] = 0;
    state[39] = 0;
    state[40] = 0;
    state[41] = 0;
    state[42] = dust2::array::sum<real_type>(shared.S0.data(), shared.dim.S0);
    state[43] = dust2::array::sum<real_type>(shared.Ea0.data(), shared.dim.Ea0) + dust2::array::sum<real_type>(shared.Eb0.data(), shared.dim.Eb0);
    state[44] = dust2::array::sum<real_type>(shared.Ir0.data(), shared.dim.Ir0) + dust2::array::sum<real_type>(shared.Id0.data(), shared.dim.Id0);
    state[45] = dust2::array::sum<real_type>(shared.R0.data(), shared.dim.R0);
    state[46] = dust2::array::sum<real_type>(shared.D0.data(), shared.dim.D0);
    state[47] = dust2::array::sum<real_type>(shared.S0.data(), shared.dim.S0) + dust2::array::sum<real_type>(shared.Ea0.data(), shared.dim.Ea0) + dust2::array::sum<real_type>(shared.Eb0.data(), shared.dim.Eb0) + dust2::array::sum<real_type>(shared.Ir0.data(), shared.dim.Ir0) + dust2::array::sum<real_type>(shared.Id0.data(), shared.dim.Id0) + dust2::array::sum<real_type>(shared.R0.data(), shared.dim.R0) + dust2::array::sum<real_type>(shared.D0.data(), shared.dim.D0);
    state[48] = 0;
    state[49] = 0;
    state[50] = 0;
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto prioritisation_step_1st_dose = state[0];
    const auto prioritisation_step_2nd_dose = state[1];
    const auto * S = state + 51;
    const auto * Ea = state + shared.offset.state.Ea;
    const auto * Eb = state + shared.offset.state.Eb;
    const auto * Ir = state + shared.offset.state.Ir;
    const auto * Id = state + shared.offset.state.Id;
    const auto * R = state + shared.offset.state.R;
    const auto * D = state + shared.offset.state.D;
    const auto * E = state + shared.offset.state.E;
    const auto * I = state + shared.offset.state.I;
    const auto * N = state + shared.offset.state.N;
    const auto cases_inc = state[2];
    const auto deaths_inc = state[3];
    const auto cases_cumulative = state[4];
    const auto deaths_cumulative = state[5];
    const auto cases_inc_00_04 = state[6];
    const auto cases_inc_05_14 = state[7];
    const auto cases_inc_15_plus = state[8];
    const auto cases_inc_PBS = state[9];
    const auto cases_inc_SW = state[10];
    const auto deaths_inc_00_04 = state[12];
    const auto deaths_inc_05_14 = state[13];
    const auto deaths_inc_15_plus = state[14];
    const auto deaths_inc_PBS = state[15];
    const auto deaths_inc_SW = state[16];
    const auto deaths_inc_HCW = state[17];
    const auto cases_cumulative_00_04 = state[18];
    const auto cases_cumulative_05_14 = state[19];
    const auto cases_cumulative_15_plus = state[20];
    const auto cases_cumulative_PBS = state[21];
    const auto cases_cumulative_SW = state[22];
    const auto cases_cumulative_HCW = state[23];
    const auto deaths_cumulative_00_04 = state[24];
    const auto deaths_cumulative_05_14 = state[25];
    const auto deaths_cumulative_15_plus = state[26];
    const auto deaths_cumulative_PBS = state[27];
    const auto deaths_cumulative_SW = state[28];
    const auto deaths_cumulative_HCW = state[29];
    const auto vax_given_S = state[30];
    const auto vax_given_Ea = state[31];
    const auto vax_given_Eb = state[32];
    const auto vax_given_R = state[33];
    const auto vax_1stdose_given_S = state[34];
    const auto vax_1stdose_given_Ea = state[35];
    const auto vax_1stdose_given_Eb = state[36];
    const auto vax_1stdose_given_R = state[37];
    const auto vax_2nddose_given_S = state[38];
    const auto vax_2nddose_given_Ea = state[39];
    const auto vax_2nddose_given_Eb = state[40];
    const auto vax_2nddose_given_R = state[41];
    const auto total_vax = state[48];
    const auto total_vax_1stdose = state[49];
    const auto total_vax_2nddose = state[50];
    const real_type p_EE = 1 - monty::math::exp(-shared.gamma_E * 2 * dt);
    const real_type p_EI = 1 - monty::math::exp(-shared.gamma_E * 2 * dt);
    const real_type p_IrR = 1 - monty::math::exp(-shared.gamma_Ir * dt);
    const real_type p_IdD = 1 - monty::math::exp(-shared.gamma_Id * dt);
    for (size_t i = 1; i <= shared.dim.n_IrR.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_IrR.dim[1]; ++j) {
        internal.n_IrR[i - 1 + (j - 1) * (shared.dim.n_IrR.mult[1])] = monty::random::binomial<real_type>(rng_state, Ir[i - 1 + (j - 1) * (shared.dim.Ir.mult[1])], p_IrR);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_IdD.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_IdD.dim[1]; ++j) {
        internal.n_IdD[i - 1 + (j - 1) * (shared.dim.n_IdD.mult[1])] = monty::random::binomial<real_type>(rng_state, Id[i - 1 + (j - 1) * (shared.dim.Id.mult[1])], p_IdD);
      }
    }
    for (size_t i = 1; i <= shared.dim.target_met_t.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.target_met_t.dim[1]; ++j) {
        internal.target_met_t[i - 1 + (j - 1) * (shared.dim.target_met_t.mult[1])] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.target_met_t.dim[0]; ++i) {
      internal.target_met_t[i - 1 + 2 * (shared.dim.target_met_t.mult[1])] = (dust2::array::sum<real_type>(N, shared.dim.N, {0, shared.dim.N.dim[0] - 1}, {2, 3}) > monty::math::round(shared.prioritisation_strategy[i - 1 + (prioritisation_step_1st_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccination_coverage_target_1st_dose_prop * dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {0, 3})) ? 1 : 0);
    }
    for (size_t i = 1; i <= shared.dim.target_met_t.dim[0]; ++i) {
      internal.target_met_t[i - 1 + 3 * (shared.dim.target_met_t.mult[1])] = (dust2::array::sum<real_type>(N, shared.dim.N, {0, shared.dim.N.dim[0] - 1}, {3, 3}) > monty::math::round(shared.prioritisation_strategy[i - 1 + (prioritisation_step_2nd_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccination_coverage_target_2nd_dose_prop * dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {0, 3})) ? 1 : 0);
    }
    for (size_t i = 1; i <= shared.dim.n_eligible_for_dose1.size; ++i) {
      internal.n_eligible_for_dose1[i - 1] = (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]]) * shared.prioritisation_strategy[i - 1 + (prioritisation_step_1st_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])];
    }
    for (size_t i = 1; i <= shared.dim.n_eligible_for_dose2.size; ++i) {
      internal.n_eligible_for_dose2[i - 1] = (S[i - 1 + 2 * (shared.dim.S.mult[1])] + Ea[i - 1 + 2 * (shared.dim.Ea.mult[1])] + Eb[i - 1 + 2 * (shared.dim.Eb.mult[1])] + R[i - 1 + 2 * (shared.dim.R.mult[1])]) * shared.prioritisation_strategy[i - 1 + (prioritisation_step_2nd_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])];
    }
    const real_type new_deaths_00_04 = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {0, 0}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_SW_12_14 = monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {16, 16}, {0, shared.dim.n_IdD.dim[1] - 1}), static_cast<real_type>(0.5));
    const real_type new_deaths_SW = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {16, 17}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_PBS = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {18, 18}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_HCW = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {19, 19}, {0, shared.dim.n_IdD.dim[1] - 1});
    for (size_t i = 1; i <= shared.dim.I_infectious.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_infectious.dim[1]; ++j) {
        internal.I_infectious[i - 1 + (j - 1) * (shared.dim.I_infectious.mult[1])] = I[i - 1 + (j - 1) * (shared.dim.I.mult[1])] * (1 - shared.ve_T[j - 1]);
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_R.dim[1]; ++j) {
        internal.delta_R[i - 1 + (j - 1) * (shared.dim.delta_R.mult[1])] = internal.n_IrR[i - 1 + (j - 1) * (shared.dim.n_IrR.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_D.dim[1]; ++j) {
        internal.delta_D[i - 1 + (j - 1) * (shared.dim.delta_D.mult[1])] = internal.n_IdD[i - 1 + (j - 1) * (shared.dim.n_IdD.mult[1])];
      }
    }
    shared.interpolate_daily_doses_t.eval(time, internal.daily_doses_t);
    const real_type prioritisation_step_1st_dose_proposal = (dust2::array::sum<real_type>(internal.target_met_t.data(), shared.dim.target_met_t, {0, shared.dim.target_met_t.dim[0] - 1}, {2, 2}) == shared.n_group ? prioritisation_step_1st_dose + 1 : prioritisation_step_1st_dose);
    const real_type prioritisation_step_2nd_dose_proposal = (dust2::array::sum<real_type>(internal.target_met_t.data(), shared.dim.target_met_t, {0, shared.dim.target_met_t.dim[0] - 1}, {3, 3}) == shared.n_group ? prioritisation_step_2nd_dose + 1 : prioritisation_step_2nd_dose);
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_S.dim[1]; ++j) {
        internal.n_vaccination_t_S[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_S.mult[1])] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S.dim[0]; ++i) {
      internal.n_vaccination_t_S[i - 1 + shared.dim.n_vaccination_t_S.mult[1]] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[1] * S[i - 1 + shared.dim.S.mult[1]] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_1st_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1)), S[i - 1 + shared.dim.S.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S.dim[0]; ++i) {
      internal.n_vaccination_t_S[i - 1 + 2 * (shared.dim.n_vaccination_t_S.mult[1])] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[2] * S[i - 1 + 2 * (shared.dim.S.mult[1])] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_2nd_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2)), S[i - 1 + 2 * (shared.dim.S.mult[1])]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_Ea.dim[1]; ++j) {
        internal.n_vaccination_t_Ea[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_Ea.mult[1])] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea.dim[0]; ++i) {
      internal.n_vaccination_t_Ea[i - 1 + shared.dim.n_vaccination_t_Ea.mult[1]] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[1] * Ea[i - 1 + shared.dim.Ea.mult[1]] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_1st_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1)), Ea[i - 1 + shared.dim.Ea.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea.dim[0]; ++i) {
      internal.n_vaccination_t_Ea[i - 1 + 2 * (shared.dim.n_vaccination_t_Ea.mult[1])] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[2] * Ea[i - 1 + 2 * (shared.dim.Ea.mult[1])] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_2nd_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2)), Ea[i - 1 + 2 * (shared.dim.Ea.mult[1])]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_Eb.dim[1]; ++j) {
        internal.n_vaccination_t_Eb[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_Eb.mult[1])] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb.dim[0]; ++i) {
      internal.n_vaccination_t_Eb[i - 1 + shared.dim.n_vaccination_t_Eb.mult[1]] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[1] * Eb[i - 1 + shared.dim.Eb.mult[1]] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_1st_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1)), Eb[i - 1 + shared.dim.Eb.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb.dim[0]; ++i) {
      internal.n_vaccination_t_Eb[i - 1 + 2 * (shared.dim.n_vaccination_t_Eb.mult[1])] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[2] * Eb[i - 1 + 2 * (shared.dim.Eb.mult[1])] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_2nd_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2)), Eb[i - 1 + 2 * (shared.dim.Eb.mult[1])]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_R.dim[1]; ++j) {
        internal.n_vaccination_t_R[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_R.mult[1])] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R.dim[0]; ++i) {
      internal.n_vaccination_t_R[i - 1 + shared.dim.n_vaccination_t_R.mult[1]] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[1] * R[i - 1 + shared.dim.R.mult[1]] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_1st_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose1.data(), shared.dim.n_eligible_for_dose1)), R[i - 1 + shared.dim.R.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R.dim[0]; ++i) {
      internal.n_vaccination_t_R[i - 1 + 2 * (shared.dim.n_vaccination_t_R.mult[1])] = (dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2) == 0 ? 0 : monty::math::min(monty::math::floor((internal.daily_doses_t[2] * R[i - 1 + 2 * (shared.dim.R.mult[1])] * shared.prioritisation_strategy[i - 1 + (prioritisation_step_2nd_dose - 1) * (shared.dim.prioritisation_strategy.mult[1])] * shared.vaccine_uptake[i - 1]) / dust2::array::sum<real_type>(internal.n_eligible_for_dose2.data(), shared.dim.n_eligible_for_dose2)), R[i - 1 + 2 * (shared.dim.R.mult[1])]));
    }
    const real_type new_deaths_SW_15_17 = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {16, 16}, {0, shared.dim.n_IdD.dim[1] - 1}) - new_deaths_SW_12_14;
    const real_type new_deaths_05_14 = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {1, 2}, {0, shared.dim.n_IdD.dim[1] - 1}) + new_deaths_SW_12_14;
    for (size_t i = 1; i <= shared.dim.prop_infectious.size; ++i) {
      internal.prop_infectious[i - 1] = (dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {0, shared.dim.N.dim[1] - 1}) == 0 ? 0 : dust2::array::sum<real_type>(internal.I_infectious.data(), shared.dim.I_infectious, {i - 1, i - 1}, {0, shared.dim.I_infectious.dim[1] - 1}) / dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {0, shared.dim.N.dim[1] - 1}));
    }
    for (size_t i = 1; i <= shared.dim.delta_S_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_S_n_vaccination.dim[1]; ++j) {
        internal.delta_S_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_S_n_vaccination.mult[1])] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_S[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_S.mult[1])]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_S[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_S.mult[1])]) : (-internal.n_vaccination_t_S[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_S.mult[1])] + internal.n_vaccination_t_S[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_S.mult[1])]))));
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Ea_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Ea_n_vaccination.dim[1]; ++j) {
        internal.delta_Ea_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_Ea_n_vaccination.mult[1])] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_Ea[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_Ea.mult[1])]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_Ea[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_Ea.mult[1])]) : (-internal.n_vaccination_t_Ea[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_Ea.mult[1])] + internal.n_vaccination_t_Ea[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_Ea.mult[1])]))));
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Eb_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Eb_n_vaccination.dim[1]; ++j) {
        internal.delta_Eb_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_Eb_n_vaccination.mult[1])] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_Eb[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_Eb.mult[1])]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_Eb[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_Eb.mult[1])]) : (-internal.n_vaccination_t_Eb[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_Eb.mult[1])] + internal.n_vaccination_t_Eb[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_Eb.mult[1])]))));
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_R_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_R_n_vaccination.dim[1]; ++j) {
        internal.delta_R_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_R_n_vaccination.mult[1])] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_R[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_R.mult[1])]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_R[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_R.mult[1])]) : (-internal.n_vaccination_t_R[i - 1 + (j - 1) * (shared.dim.n_vaccination_t_R.mult[1])] + internal.n_vaccination_t_R[i - 1 + (j - 1 - 1) * (shared.dim.n_vaccination_t_R.mult[1])]))));
      }
    }
    const real_type new_deaths_15_plus = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {3, 15}, {0, shared.dim.n_IdD.dim[1] - 1}) + new_deaths_SW_15_17 + dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {17, 19}, {0, shared.dim.n_IdD.dim[1] - 1});
    for (size_t i = 1; i <= shared.dim.s_ij_gen_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.s_ij_gen_pop.dim[1]; ++j) {
        internal.s_ij_gen_pop[i - 1 + (j - 1) * (shared.dim.s_ij_gen_pop.mult[1])] = shared.m_gen_pop[i - 1 + (j - 1) * (shared.dim.m_gen_pop.mult[1])] * internal.prop_infectious[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.s_ij_sex.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.s_ij_sex.dim[1]; ++j) {
        internal.s_ij_sex[i - 1 + (j - 1) * (shared.dim.s_ij_sex.mult[1])] = shared.m_sex[i - 1 + (j - 1) * (shared.dim.m_sex.mult[1])] * internal.prop_infectious[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.lambda.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda.dim[1]; ++j) {
        internal.lambda[i - 1 + (j - 1) * (shared.dim.lambda.mult[1])] = ((shared.beta_h * dust2::array::sum<real_type>(internal.s_ij_gen_pop.data(), shared.dim.s_ij_gen_pop, {i - 1, i - 1}, {0, shared.dim.s_ij_gen_pop.dim[1] - 1})) + (shared.beta_s * dust2::array::sum<real_type>(internal.s_ij_sex.data(), shared.dim.s_ij_sex, {i - 1, i - 1}, {0, shared.dim.s_ij_sex.dim[1] - 1})) + shared.beta_z[i - 1]) * (1 - shared.ve_I[j - 1]);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EaEb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EaEb.dim[1]; ++j) {
        internal.n_EaEb[i - 1 + (j - 1) * (shared.dim.n_EaEb.mult[1])] = monty::random::binomial<real_type>(rng_state, Ea[i - 1 + (j - 1) * (shared.dim.Ea.mult[1])] + internal.delta_Ea_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_Ea_n_vaccination.mult[1])], p_EE);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EbI.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EbI.dim[1]; ++j) {
        internal.n_EbI[i - 1 + (j - 1) * (shared.dim.n_EbI.mult[1])] = monty::random::binomial<real_type>(rng_state, Eb[i - 1 + (j - 1) * (shared.dim.Eb.mult[1])] + internal.delta_Eb_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_Eb_n_vaccination.mult[1])], p_EI);
      }
    }
    for (size_t i = 1; i <= shared.dim.p_SE.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.p_SE.dim[1]; ++j) {
        internal.p_SE[i - 1 + (j - 1) * (shared.dim.p_SE.mult[1])] = 1 - monty::math::exp(-internal.lambda[i - 1 + (j - 1) * (shared.dim.lambda.mult[1])] * dt);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EbId.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EbId.dim[1]; ++j) {
        internal.n_EbId[i - 1 + (j - 1) * (shared.dim.n_EbId.mult[1])] = monty::random::binomial<real_type>(rng_state, internal.n_EbI[i - 1 + (j - 1) * (shared.dim.n_EbI.mult[1])], shared.CFR[i - 1 + (j - 1) * (shared.dim.CFR.mult[1])]);
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Eb.dim[1]; ++j) {
        internal.delta_Eb[i - 1 + (j - 1) * (shared.dim.delta_Eb.mult[1])] = internal.n_EaEb[i - 1 + (j - 1) * (shared.dim.n_EaEb.mult[1])] - internal.n_EbI[i - 1 + (j - 1) * (shared.dim.n_EbI.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.n_SEa.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_SEa.dim[1]; ++j) {
        internal.n_SEa[i - 1 + (j - 1) * (shared.dim.n_SEa.mult[1])] = monty::random::binomial<real_type>(rng_state, S[i - 1 + (j - 1) * (shared.dim.S.mult[1])] + internal.delta_S_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_S_n_vaccination.mult[1])], internal.p_SE[i - 1 + (j - 1) * (shared.dim.p_SE.mult[1])]);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EbIr.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EbIr.dim[1]; ++j) {
        internal.n_EbIr[i - 1 + (j - 1) * (shared.dim.n_EbIr.mult[1])] = internal.n_EbI[i - 1 + (j - 1) * (shared.dim.n_EbI.mult[1])] - internal.n_EbId[i - 1 + (j - 1) * (shared.dim.n_EbId.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Id.dim[1]; ++j) {
        internal.delta_Id[i - 1 + (j - 1) * (shared.dim.delta_Id.mult[1])] = internal.n_EbId[i - 1 + (j - 1) * (shared.dim.n_EbId.mult[1])] - internal.n_IdD[i - 1 + (j - 1) * (shared.dim.n_IdD.mult[1])];
      }
    }
    const real_type new_cases_00_04 = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {0, 0}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_SW_12_14 = monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {16, 16}, {0, shared.dim.n_SEa.dim[1] - 1}), static_cast<real_type>(0.5));
    const real_type new_cases_SW = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {16, 17}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_PBS = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {18, 18}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_HCW = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {19, 19}, {0, shared.dim.n_SEa.dim[1] - 1});
    for (size_t i = 1; i <= shared.dim.delta_Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Ea.dim[1]; ++j) {
        internal.delta_Ea[i - 1 + (j - 1) * (shared.dim.delta_Ea.mult[1])] = internal.n_SEa[i - 1 + (j - 1) * (shared.dim.n_SEa.mult[1])] - internal.n_EaEb[i - 1 + (j - 1) * (shared.dim.n_EaEb.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Ir.dim[1]; ++j) {
        internal.delta_Ir[i - 1 + (j - 1) * (shared.dim.delta_Ir.mult[1])] = internal.n_EbIr[i - 1 + (j - 1) * (shared.dim.n_EbIr.mult[1])] - internal.n_IrR[i - 1 + (j - 1) * (shared.dim.n_IrR.mult[1])];
      }
    }
    const real_type new_cases_SW_15_17 = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {16, 16}, {0, shared.dim.n_SEa.dim[1] - 1}) - new_cases_SW_12_14;
    const real_type new_cases_05_14 = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {1, 2}, {0, shared.dim.n_SEa.dim[1] - 1}) + new_cases_SW_12_14;
    const real_type new_cases_15_plus = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {3, 15}, {0, shared.dim.n_SEa.dim[1] - 1}) + new_cases_SW_15_17 + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {17, 19}, {0, shared.dim.n_SEa.dim[1] - 1});
    state_next[0] = (prioritisation_step_1st_dose_proposal > shared.N_prioritisation_steps ? shared.N_prioritisation_steps : prioritisation_step_1st_dose_proposal);
    state_next[1] = (prioritisation_step_2nd_dose_proposal > shared.N_prioritisation_steps ? shared.N_prioritisation_steps : prioritisation_step_2nd_dose_proposal);
    state_next[30] = dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S);
    state_next[31] = dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea);
    state_next[32] = dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb);
    state_next[33] = dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R);
    state_next[34] = dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S, {0, shared.dim.n_vaccination_t_S.dim[0] - 1}, {1, 1});
    state_next[35] = dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea, {0, shared.dim.n_vaccination_t_Ea.dim[0] - 1}, {1, 1});
    state_next[36] = dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb, {0, shared.dim.n_vaccination_t_Eb.dim[0] - 1}, {1, 1});
    state_next[37] = dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R, {0, shared.dim.n_vaccination_t_R.dim[0] - 1}, {1, 1});
    state_next[38] = dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S, {0, shared.dim.n_vaccination_t_S.dim[0] - 1}, {2, 2});
    state_next[39] = dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea, {0, shared.dim.n_vaccination_t_Ea.dim[0] - 1}, {2, 2});
    state_next[40] = dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb, {0, shared.dim.n_vaccination_t_Eb.dim[0] - 1}, {2, 2});
    state_next[41] = dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R, {0, shared.dim.n_vaccination_t_R.dim[0] - 1}, {2, 2});
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.S.mult[1]) + 51] = S[i - 1 + (j - 1) * (shared.dim.S.mult[1])] + internal.delta_S_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_S_n_vaccination.mult[1])] - internal.n_SEa[i - 1 + (j - 1) * (shared.dim.n_SEa.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ea.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.Ea.mult[1]) + shared.offset.state.Ea] = Ea[i - 1 + (j - 1) * (shared.dim.Ea.mult[1])] + internal.delta_Ea_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_Ea_n_vaccination.mult[1])] + internal.delta_Ea[i - 1 + (j - 1) * (shared.dim.delta_Ea.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Eb.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.Eb.mult[1]) + shared.offset.state.Eb] = Eb[i - 1 + (j - 1) * (shared.dim.Eb.mult[1])] + internal.delta_Eb_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_Eb_n_vaccination.mult[1])] + internal.delta_Eb[i - 1 + (j - 1) * (shared.dim.delta_Eb.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ir.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.Ir.mult[1]) + shared.offset.state.Ir] = Ir[i - 1 + (j - 1) * (shared.dim.Ir.mult[1])] + internal.delta_Ir[i - 1 + (j - 1) * (shared.dim.delta_Ir.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Id.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.Id.mult[1]) + shared.offset.state.Id] = Id[i - 1 + (j - 1) * (shared.dim.Id.mult[1])] + internal.delta_Id[i - 1 + (j - 1) * (shared.dim.delta_Id.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.R.mult[1]) + shared.offset.state.R] = R[i - 1 + (j - 1) * (shared.dim.R.mult[1])] + internal.delta_R_n_vaccination[i - 1 + (j - 1) * (shared.dim.delta_R_n_vaccination.mult[1])] + internal.delta_R[i - 1 + (j - 1) * (shared.dim.delta_R.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.D.mult[1]) + shared.offset.state.D] = D[i - 1 + (j - 1) * (shared.dim.D.mult[1])] + internal.delta_D[i - 1 + (j - 1) * (shared.dim.delta_D.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.E.mult[1]) + shared.offset.state.E] = Ea[i - 1 + (j - 1) * (shared.dim.Ea.mult[1])] + Eb[i - 1 + (j - 1) * (shared.dim.Eb.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.I.mult[1]) + shared.offset.state.I] = Ir[i - 1 + (j - 1) * (shared.dim.Ir.mult[1])] + Id[i - 1 + (j - 1) * (shared.dim.Id.mult[1])];
      }
    }
    for (size_t i = 1; i <= shared.dim.N.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.N.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * (shared.dim.N.mult[1]) + shared.offset.state.N] = S[i - 1 + (j - 1) * (shared.dim.S.mult[1])] + Ea[i - 1 + (j - 1) * (shared.dim.Ea.mult[1])] + Eb[i - 1 + (j - 1) * (shared.dim.Eb.mult[1])] + Ir[i - 1 + (j - 1) * (shared.dim.Ir.mult[1])] + Id[i - 1 + (j - 1) * (shared.dim.Id.mult[1])] + R[i - 1 + (j - 1) * (shared.dim.R.mult[1])] + D[i - 1 + (j - 1) * (shared.dim.D.mult[1])];
      }
    }
    state_next[2] = cases_inc + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa);
    state_next[6] = cases_inc_00_04 + new_cases_00_04;
    state_next[7] = cases_inc_05_14 + new_cases_05_14;
    state_next[8] = cases_inc_15_plus + new_cases_15_plus;
    state_next[10] = cases_inc_SW + new_cases_SW;
    state_next[9] = cases_inc_PBS + new_cases_PBS;
    state_next[11] = cases_inc_SW + new_cases_HCW;
    state_next[4] = cases_cumulative + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa);
    state_next[18] = cases_cumulative_00_04 + new_cases_00_04;
    state_next[19] = cases_cumulative_05_14 + new_cases_05_14;
    state_next[20] = cases_cumulative_15_plus + new_cases_15_plus;
    state_next[22] = cases_cumulative_SW + new_cases_SW;
    state_next[21] = cases_cumulative_PBS + new_cases_PBS;
    state_next[23] = cases_cumulative_HCW + new_cases_HCW;
    state_next[3] = deaths_inc + dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD);
    state_next[12] = deaths_inc_00_04 + new_deaths_00_04;
    state_next[13] = deaths_inc_05_14 + new_deaths_05_14;
    state_next[14] = deaths_inc_15_plus + new_deaths_15_plus;
    state_next[16] = deaths_inc_SW + new_deaths_SW;
    state_next[15] = deaths_inc_PBS + new_deaths_PBS;
    state_next[17] = deaths_inc_HCW + new_deaths_HCW;
    state_next[5] = deaths_cumulative + dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD);
    state_next[24] = deaths_cumulative_00_04 + new_deaths_00_04;
    state_next[25] = deaths_cumulative_05_14 + new_deaths_05_14;
    state_next[26] = deaths_cumulative_15_plus + new_deaths_15_plus;
    state_next[28] = deaths_cumulative_SW + new_deaths_SW;
    state_next[27] = deaths_cumulative_PBS + new_deaths_PBS;
    state_next[29] = deaths_cumulative_HCW + new_deaths_HCW;
    state_next[42] = dust2::array::sum<real_type>(S, shared.dim.S);
    state_next[43] = dust2::array::sum<real_type>(E, shared.dim.E);
    state_next[44] = dust2::array::sum<real_type>(I, shared.dim.I);
    state_next[45] = dust2::array::sum<real_type>(R, shared.dim.R);
    state_next[46] = dust2::array::sum<real_type>(D, shared.dim.D);
    state_next[47] = dust2::array::sum<real_type>(N, shared.dim.N);
    state_next[48] = total_vax + vax_given_S + vax_given_Ea + vax_given_Eb + vax_given_R;
    state_next[49] = total_vax_1stdose + vax_1stdose_given_S + vax_1stdose_given_Ea + vax_1stdose_given_Eb + vax_1stdose_given_R;
    state_next[50] = total_vax_2nddose + vax_2nddose_given_S + vax_2nddose_given_Ea + vax_2nddose_given_Eb + vax_2nddose_given_R;
  }
  static auto zero_every(const shared_state& shared) {
    return dust2::zero_every_type<real_type>{{7, {2}}, {7, {3}}, {7, {6}}, {7, {7}}, {7, {8}}, {7, {9}}, {7, {10}}, {7, {11}}, {7, {12}}, {7, {13}}, {7, {14}}, {7, {15}}, {7, {16}}, {7, {17}}};
  }
  static real_type compare_data(real_type time, const real_type* state, const data_type& data, const shared_state& shared, internal_state& internal, rng_state_type& rng_state) {
    const auto cases_inc = state[2];
    const auto deaths_inc = state[3];
    const auto cases_inc_00_04 = state[6];
    const auto cases_inc_05_14 = state[7];
    const auto cases_inc_15_plus = state[8];
    const auto deaths_inc_00_04 = state[12];
    const auto deaths_inc_05_14 = state[13];
    const auto deaths_inc_15_plus = state[14];
    real_type ll = 0;
    const real_type model_cases = cases_inc + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_00_04 = cases_inc_00_04 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_05_14 = cases_inc_05_14 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_15_plus = cases_inc_15_plus + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths = deaths_inc + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths_00_04 = deaths_inc_00_04 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths_05_14 = deaths_inc_05_14 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths_15_plus = deaths_inc_15_plus + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    if (!std::isnan(data.cases)) {
      ll += monty::density::poisson(data.cases, model_cases, true);
    }
    if (!std::isnan(data.cases_00_04)) {
      ll += monty::density::poisson(data.cases_00_04, model_cases_00_04, true);
    }
    if (!std::isnan(data.cases_05_14)) {
      ll += monty::density::poisson(data.cases_05_14, model_cases_05_14, true);
    }
    if (!std::isnan(data.cases_15_plus)) {
      ll += monty::density::poisson(data.cases_15_plus, model_cases_15_plus, true);
    }
    if (!std::isnan(data.deaths)) {
      ll += monty::density::poisson(data.deaths, model_deaths, true);
    }
    if (!std::isnan(data.deaths_00_04)) {
      ll += monty::density::poisson(data.deaths_00_04, model_deaths_00_04, true);
    }
    if (!std::isnan(data.deaths_05_14)) {
      ll += monty::density::poisson(data.deaths_05_14, model_deaths_05_14, true);
    }
    if (!std::isnan(data.deaths_15_plus)) {
      ll += monty::density::poisson(data.deaths_15_plus, model_deaths_15_plus, true);
    }
    return ll;
  }
};
