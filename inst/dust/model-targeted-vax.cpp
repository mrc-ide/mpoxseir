// Generated by odin2 (version 0.3.24) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(model_targeted_vax)]]
// [[dust2::time_type(discrete)]]
// [[dust2::has_compare()]]
// [[dust2::parameter(is_child, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(daily_doses_children_value, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(daily_doses_children_time, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(daily_doses_adults_value, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(daily_doses_adults_time, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(N_prioritisation_steps_children, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(N_prioritisation_steps_adults, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(prioritisation_strategy_children, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(prioritisation_strategy_adults, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(m_gen_pop, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(m_sex, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(seed_rate, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(S0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Ea0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Eb0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Ir0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Id0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(R0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(D0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(beta_h, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(beta_s, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(beta_z, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(beta_hcw, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gamma_E, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gamma_Ir, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gamma_Id, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(CFR, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(ve_T, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(ve_I, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_vax, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(n_group, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(exp_noise, type = "real_type", rank = 0, required = FALSE, constant = FALSE)]]
// [[dust2::parameter(phi_00_04, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_05_14, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_15_plus, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_CSW_12_14, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_CSW_15_17, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_ASW, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_HCW, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi_PBS, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_cases, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_cases_00_04, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_cases_05_14, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_cases_15_plus, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_deaths, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_deaths_00_04, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_deaths_05_14, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_deaths_15_plus, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rho_00_04, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(rho_00_14, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
class model_targeted_vax {
public:
  model_targeted_vax() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct odin_internals_type {
      struct {
        dust2::packing state;
      } packing;
      struct {
        std::array<size_t, 121> state;
      } offset;
    } odin;
    struct dim_type {
      dust2::array::dimensions<1> is_child;
      dust2::array::dimensions<2> daily_doses_children_value;
      dust2::array::dimensions<1> daily_doses_children_time;
      dust2::array::dimensions<2> daily_doses_adults_value;
      dust2::array::dimensions<1> daily_doses_adults_time;
      dust2::array::dimensions<1> daily_doses_children_t;
      dust2::array::dimensions<1> daily_doses_adults_t;
      dust2::array::dimensions<2> prioritisation_strategy_children;
      dust2::array::dimensions<2> prioritisation_strategy_adults;
      dust2::array::dimensions<1> target_met_children_t;
      dust2::array::dimensions<2> target_met_adults_t;
      dust2::array::dimensions<1> coverage_target_1st_dose_children;
      dust2::array::dimensions<1> coverage_target_1st_dose_adults;
      dust2::array::dimensions<1> coverage_target_2nd_dose_adults;
      dust2::array::dimensions<1> new_target_met_children_t;
      dust2::array::dimensions<1> give_dose1_children;
      dust2::array::dimensions<1> give_dose1_adults;
      dust2::array::dimensions<1> give_dose2_adults;
      dust2::array::dimensions<1> children_dose1_denom;
      dust2::array::dimensions<1> adults_dose1_denom;
      dust2::array::dimensions<1> adults_dose2_denom;
      dust2::array::dimensions<1> max_vax_remaining;
      dust2::array::dimensions<1> children_dose1_prob;
      dust2::array::dimensions<1> children_dose1_group;
      dust2::array::dimensions<1> adults_dose1_prob;
      dust2::array::dimensions<1> adults_dose1_group;
      dust2::array::dimensions<1> adults_dose2_prob;
      dust2::array::dimensions<1> adults_dose2_group;
      dust2::array::dimensions<2> seed;
      dust2::array::dimensions<2> N;
      dust2::array::dimensions<2> S;
      dust2::array::dimensions<2> A;
      dust2::array::dimensions<2> S0;
      dust2::array::dimensions<2> p_SE;
      dust2::array::dimensions<2> n_SEa;
      dust2::array::dimensions<2> Ea;
      dust2::array::dimensions<2> Ea0;
      dust2::array::dimensions<2> Eb0;
      dust2::array::dimensions<2> delta_Ea;
      dust2::array::dimensions<2> n_EaEb;
      dust2::array::dimensions<2> Eb;
      dust2::array::dimensions<2> delta_Eb;
      dust2::array::dimensions<2> n_EbI;
      dust2::array::dimensions<2> n_EbId;
      dust2::array::dimensions<2> n_EbIr;
      dust2::array::dimensions<2> E;
      dust2::array::dimensions<2> Ir0;
      dust2::array::dimensions<2> Ir;
      dust2::array::dimensions<2> delta_Ir;
      dust2::array::dimensions<2> n_IrR;
      dust2::array::dimensions<2> Id0;
      dust2::array::dimensions<2> Id;
      dust2::array::dimensions<2> delta_Id;
      dust2::array::dimensions<2> n_IdD;
      dust2::array::dimensions<2> I;
      dust2::array::dimensions<2> R;
      dust2::array::dimensions<2> R0;
      dust2::array::dimensions<2> delta_R;
      dust2::array::dimensions<2> D;
      dust2::array::dimensions<2> D0;
      dust2::array::dimensions<2> delta_D;
      dust2::array::dimensions<2> lambda;
      dust2::array::dimensions<2> lambda_hh;
      dust2::array::dimensions<2> lambda_s;
      dust2::array::dimensions<2> lambda_hc;
      dust2::array::dimensions<2> lambda_z;
      dust2::array::dimensions<2> p_hh;
      dust2::array::dimensions<2> p_s;
      dust2::array::dimensions<2> p_hc;
      dust2::array::dimensions<2> n_SEa_hh;
      dust2::array::dimensions<2> n_SEa_s;
      dust2::array::dimensions<2> n_SEa_hc;
      dust2::array::dimensions<2> n_SEa_z;
      dust2::array::dimensions<2> m_gen_pop;
      dust2::array::dimensions<2> m_sex;
      dust2::array::dimensions<2> I_infectious;
      dust2::array::dimensions<1> prop_infectious;
      dust2::array::dimensions<2> s_ij_gen_pop;
      dust2::array::dimensions<2> s_ij_sex;
      dust2::array::dimensions<1> beta_z;
      dust2::array::dimensions<2> CFR;
      dust2::array::dimensions<1> ve_T;
      dust2::array::dimensions<2> ve_I;
      dust2::array::dimensions<1> cases_cumulative_by_age;
      dust2::array::dimensions<2> n_vaccination_t_S;
      dust2::array::dimensions<2> n_vaccination_t_Ea;
      dust2::array::dimensions<2> n_vaccination_t_Eb;
      dust2::array::dimensions<2> n_vaccination_t_R;
      dust2::array::dimensions<2> n_vaccination_t;
      dust2::array::dimensions<1> n_vaccination_t_S_children;
      dust2::array::dimensions<1> n_vaccination_t_Ea_children;
      dust2::array::dimensions<1> n_vaccination_t_Eb_children;
      dust2::array::dimensions<1> n_vaccination_t_R_children;
      dust2::array::dimensions<1> n_vaccination_t_S_adults;
      dust2::array::dimensions<1> n_vaccination_t_Ea_adults;
      dust2::array::dimensions<1> n_vaccination_t_Eb_adults;
      dust2::array::dimensions<1> n_vaccination_t_R_adults;
      dust2::array::dimensions<2> delta_S_n_vaccination;
      dust2::array::dimensions<2> delta_Ea_n_vaccination;
      dust2::array::dimensions<2> delta_Eb_n_vaccination;
      dust2::array::dimensions<2> delta_R_n_vaccination;
    } dim;
    int N_prioritisation_steps_children;
    int N_prioritisation_steps_adults;
    real_type beta_h;
    real_type beta_s;
    real_type beta_hcw;
    real_type gamma_E;
    real_type gamma_Ir;
    real_type gamma_Id;
    int n_vax;
    int n_group;
    real_type exp_noise;
    real_type phi_00_04;
    real_type phi_05_14;
    real_type phi_15_plus;
    real_type phi_CSW_12_14;
    real_type phi_CSW_15_17;
    real_type phi_ASW;
    real_type phi_HCW;
    real_type phi_PBS;
    real_type alpha_cases;
    real_type alpha_cases_00_04;
    real_type alpha_cases_05_14;
    real_type alpha_cases_15_plus;
    real_type alpha_deaths;
    real_type alpha_deaths_00_04;
    real_type alpha_deaths_05_14;
    real_type alpha_deaths_15_plus;
    real_type rho_00_04;
    real_type rho_00_14;
    std::vector<real_type> daily_doses_children_value;
    std::vector<real_type> daily_doses_children_time;
    std::vector<real_type> daily_doses_adults_value;
    std::vector<real_type> daily_doses_adults_time;
    std::vector<real_type> is_child;
    dust2::interpolate::InterpolateConstantArray<real_type, 1> interpolate_daily_doses_children_t;
    dust2::interpolate::InterpolateConstantArray<real_type, 1> interpolate_daily_doses_adults_t;
    std::vector<real_type> prioritisation_strategy_children;
    std::vector<real_type> prioritisation_strategy_adults;
    std::vector<real_type> m_gen_pop;
    std::vector<real_type> m_sex;
    std::vector<real_type> seed_rate;
    std::vector<real_type> S0;
    std::vector<real_type> Ea0;
    std::vector<real_type> Eb0;
    std::vector<real_type> Ir0;
    std::vector<real_type> Id0;
    std::vector<real_type> R0;
    std::vector<real_type> D0;
    std::vector<real_type> beta_z;
    std::vector<real_type> CFR;
    std::vector<real_type> ve_T;
    std::vector<real_type> ve_I;
    std::vector<real_type> lambda_z;
  };
  struct internal_state {
    std::vector<real_type> n_IrR;
    std::vector<real_type> n_IdD;
    std::vector<real_type> target_met_children_t;
    std::vector<real_type> target_met_adults_t;
    std::vector<real_type> coverage_target_1st_dose_children;
    std::vector<real_type> coverage_target_1st_dose_adults;
    std::vector<real_type> coverage_target_2nd_dose_adults;
    std::vector<real_type> max_vax_remaining;
    std::vector<real_type> I_infectious;
    std::vector<real_type> delta_R;
    std::vector<real_type> delta_D;
    std::vector<real_type> daily_doses_children_t;
    std::vector<real_type> daily_doses_adults_t;
    std::vector<real_type> give_dose1_children;
    std::vector<real_type> give_dose1_adults;
    std::vector<real_type> give_dose2_adults;
    std::vector<real_type> new_D;
    std::vector<real_type> prop_infectious;
    std::vector<real_type> lambda_hc;
    std::vector<real_type> children_dose1_denom;
    std::vector<real_type> adults_dose1_denom;
    std::vector<real_type> adults_dose2_denom;
    std::vector<real_type> s_ij_gen_pop;
    std::vector<real_type> s_ij_sex;
    std::vector<real_type> children_dose1_prob;
    std::vector<real_type> adults_dose1_prob;
    std::vector<real_type> adults_dose2_prob;
    std::vector<real_type> lambda_hh;
    std::vector<real_type> lambda_s;
    std::vector<real_type> children_dose1_group;
    std::vector<real_type> adults_dose1_group;
    std::vector<real_type> adults_dose2_group;
    std::vector<real_type> lambda;
    std::vector<real_type> n_vaccination_t_S_children;
    std::vector<real_type> n_vaccination_t_S_adults;
    std::vector<real_type> p_SE;
    std::vector<real_type> p_hh;
    std::vector<real_type> p_s;
    std::vector<real_type> p_hc;
    std::vector<real_type> n_vaccination_t_Ea_children;
    std::vector<real_type> n_vaccination_t_Ea_adults;
    std::vector<real_type> n_vaccination_t_S;
    std::vector<real_type> n_vaccination_t_Eb_children;
    std::vector<real_type> n_vaccination_t_Eb_adults;
    std::vector<real_type> n_vaccination_t_Ea;
    std::vector<real_type> delta_S_n_vaccination;
    std::vector<real_type> n_vaccination_t_R_children;
    std::vector<real_type> n_vaccination_t_R_adults;
    std::vector<real_type> n_vaccination_t_Eb;
    std::vector<real_type> delta_Ea_n_vaccination;
    std::vector<real_type> n_SEa;
    std::vector<real_type> n_vaccination_t_R;
    std::vector<real_type> delta_Eb_n_vaccination;
    std::vector<real_type> new_S;
    std::vector<real_type> n_SEa_hh;
    std::vector<real_type> n_EaEb;
    std::vector<real_type> delta_R_n_vaccination;
    std::vector<real_type> n_vaccination_t;
    std::vector<real_type> n_SEa_s;
    std::vector<real_type> n_EbI;
    std::vector<real_type> delta_Ea;
    std::vector<real_type> new_Ea;
    std::vector<real_type> new_R;
    std::vector<real_type> n_SEa_hc;
    std::vector<real_type> n_EbId;
    std::vector<real_type> delta_Eb;
    std::vector<real_type> new_Eb;
    std::vector<real_type> n_SEa_z;
    std::vector<real_type> n_EbIr;
    std::vector<real_type> delta_Id;
    std::vector<real_type> new_Id;
    std::vector<real_type> new_E;
    std::vector<real_type> delta_Ir;
    std::vector<real_type> new_Ir;
    std::vector<real_type> new_I;
    std::vector<real_type> new_N;
    std::vector<real_type> new_A;
    std::vector<real_type> new_target_met_children_t;
    std::vector<real_type> seed;
  };
  struct data_type {
    real_type cases;
    real_type cases_00_04;
    real_type cases_05_14;
    real_type cases_15_plus;
    real_type deaths;
    real_type deaths_00_04;
    real_type deaths_05_14;
    real_type deaths_15_plus;
    real_type cfr_00_04;
    real_type cfr_05_14;
    real_type cfr_15_plus;
    real_type cases_total;
    real_type cases_HCW;
    real_type cases_SW;
    real_type cases_00_04_binom;
    real_type cases_00_14_binom;
    real_type cases_binom;
  };
  static dust2::packing packing_state(const shared_state& shared) {
    return shared.odin.packing.state;
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    dim.daily_doses_children_value = dust2::r::read_dimensions<2>(parameters, "daily_doses_children_value");
    dim.daily_doses_children_time = dust2::r::read_dimensions<1>(parameters, "daily_doses_children_time");
    dim.daily_doses_adults_value = dust2::r::read_dimensions<2>(parameters, "daily_doses_adults_value");
    dim.daily_doses_adults_time = dust2::r::read_dimensions<1>(parameters, "daily_doses_adults_time");
    const int N_prioritisation_steps_children = dust2::r::read_int(parameters, "N_prioritisation_steps_children");
    const int N_prioritisation_steps_adults = dust2::r::read_int(parameters, "N_prioritisation_steps_adults");
    const real_type beta_h = dust2::r::read_real(parameters, "beta_h");
    const real_type beta_s = dust2::r::read_real(parameters, "beta_s");
    const real_type beta_hcw = dust2::r::read_real(parameters, "beta_hcw");
    const real_type gamma_E = dust2::r::read_real(parameters, "gamma_E");
    const real_type gamma_Ir = dust2::r::read_real(parameters, "gamma_Ir");
    const real_type gamma_Id = dust2::r::read_real(parameters, "gamma_Id");
    const int n_vax = dust2::r::read_int(parameters, "n_vax");
    const int n_group = dust2::r::read_int(parameters, "n_group");
    const real_type exp_noise = dust2::r::read_real(parameters, "exp_noise", 1e+06);
    const real_type phi_00_04 = dust2::r::read_real(parameters, "phi_00_04");
    const real_type phi_05_14 = dust2::r::read_real(parameters, "phi_05_14");
    const real_type phi_15_plus = dust2::r::read_real(parameters, "phi_15_plus");
    const real_type phi_CSW_12_14 = dust2::r::read_real(parameters, "phi_CSW_12_14");
    const real_type phi_CSW_15_17 = dust2::r::read_real(parameters, "phi_CSW_15_17");
    const real_type phi_ASW = dust2::r::read_real(parameters, "phi_ASW");
    const real_type phi_HCW = dust2::r::read_real(parameters, "phi_HCW");
    const real_type phi_PBS = dust2::r::read_real(parameters, "phi_PBS");
    const real_type alpha_cases = dust2::r::read_real(parameters, "alpha_cases");
    const real_type alpha_cases_00_04 = dust2::r::read_real(parameters, "alpha_cases_00_04");
    const real_type alpha_cases_05_14 = dust2::r::read_real(parameters, "alpha_cases_05_14");
    const real_type alpha_cases_15_plus = dust2::r::read_real(parameters, "alpha_cases_15_plus");
    const real_type alpha_deaths = dust2::r::read_real(parameters, "alpha_deaths");
    const real_type alpha_deaths_00_04 = dust2::r::read_real(parameters, "alpha_deaths_00_04");
    const real_type alpha_deaths_05_14 = dust2::r::read_real(parameters, "alpha_deaths_05_14");
    const real_type alpha_deaths_15_plus = dust2::r::read_real(parameters, "alpha_deaths_15_plus");
    const real_type rho_00_04 = dust2::r::read_real(parameters, "rho_00_04");
    const real_type rho_00_14 = dust2::r::read_real(parameters, "rho_00_14");
    dim.is_child.set({static_cast<size_t>(n_group)});
    std::vector<real_type> daily_doses_children_value(dim.daily_doses_children_value.size);
    dust2::r::read_real_array(parameters, dim.daily_doses_children_value, daily_doses_children_value.data(), "daily_doses_children_value", true);
    std::vector<real_type> daily_doses_children_time(dim.daily_doses_children_time.size);
    dust2::r::read_real_array(parameters, dim.daily_doses_children_time, daily_doses_children_time.data(), "daily_doses_children_time", true);
    std::vector<real_type> daily_doses_adults_value(dim.daily_doses_adults_value.size);
    dust2::r::read_real_array(parameters, dim.daily_doses_adults_value, daily_doses_adults_value.data(), "daily_doses_adults_value", true);
    std::vector<real_type> daily_doses_adults_time(dim.daily_doses_adults_time.size);
    dust2::r::read_real_array(parameters, dim.daily_doses_adults_time, daily_doses_adults_time.data(), "daily_doses_adults_time", true);
    dim.daily_doses_children_t.set({static_cast<size_t>(n_vax)});
    dim.daily_doses_adults_t.set({static_cast<size_t>(n_vax)});
    dim.prioritisation_strategy_children.set({static_cast<size_t>(n_group), static_cast<size_t>(N_prioritisation_steps_children)});
    dim.prioritisation_strategy_adults.set({static_cast<size_t>(n_group), static_cast<size_t>(N_prioritisation_steps_adults)});
    dim.target_met_children_t.set({static_cast<size_t>(n_group)});
    dim.target_met_adults_t.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.coverage_target_1st_dose_children.set({static_cast<size_t>(n_group)});
    dim.coverage_target_1st_dose_adults.set({static_cast<size_t>(n_group)});
    dim.coverage_target_2nd_dose_adults.set({static_cast<size_t>(n_group)});
    dim.new_target_met_children_t.set({static_cast<size_t>(n_group)});
    dim.give_dose1_children.set({static_cast<size_t>(n_group)});
    dim.give_dose1_adults.set({static_cast<size_t>(n_group)});
    dim.give_dose2_adults.set({static_cast<size_t>(n_group)});
    dim.children_dose1_denom.set({static_cast<size_t>(n_group)});
    dim.adults_dose1_denom.set({static_cast<size_t>(n_group)});
    dim.adults_dose2_denom.set({static_cast<size_t>(n_group)});
    dim.max_vax_remaining.set({static_cast<size_t>(n_group)});
    dim.children_dose1_prob.set({static_cast<size_t>(n_group)});
    dim.children_dose1_group.set({static_cast<size_t>(n_group)});
    dim.adults_dose1_prob.set({static_cast<size_t>(n_group)});
    dim.adults_dose1_group.set({static_cast<size_t>(n_group)});
    dim.adults_dose2_prob.set({static_cast<size_t>(n_group)});
    dim.adults_dose2_group.set({static_cast<size_t>(n_group)});
    dim.seed.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.N.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.S.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.A.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.S0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.p_SE.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_SEa.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Ea.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Ea0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Eb0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_Ea.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_EaEb.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Eb.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_Eb.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_EbI.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_EbId.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_EbIr.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.E.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Ir0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Ir.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_Ir.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_IrR.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Id0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.Id.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_Id.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_IdD.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.I.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.R.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.R0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_R.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.D.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.D0.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_D.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.lambda.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.lambda_hh.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.lambda_s.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.lambda_hc.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.lambda_z.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.p_hh.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.p_s.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.p_hc.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_SEa_hh.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_SEa_s.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_SEa_hc.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_SEa_z.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.m_gen_pop.set({static_cast<size_t>(n_group), static_cast<size_t>(n_group)});
    dim.m_sex.set({static_cast<size_t>(n_group), static_cast<size_t>(n_group)});
    dim.I_infectious.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.prop_infectious.set({static_cast<size_t>(n_group)});
    dim.s_ij_gen_pop.set({static_cast<size_t>(n_group), static_cast<size_t>(n_group)});
    dim.s_ij_sex.set({static_cast<size_t>(n_group), static_cast<size_t>(n_group)});
    dim.beta_z.set({static_cast<size_t>(n_group)});
    dim.CFR.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.ve_T.set({static_cast<size_t>(n_vax)});
    dim.ve_I.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.cases_cumulative_by_age.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_S.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_vaccination_t_Ea.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_vaccination_t_Eb.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_vaccination_t_R.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_vaccination_t.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.n_vaccination_t_S_children.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_Ea_children.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_Eb_children.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_R_children.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_S_adults.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_Ea_adults.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_Eb_adults.set({static_cast<size_t>(n_group)});
    dim.n_vaccination_t_R_adults.set({static_cast<size_t>(n_group)});
    dim.delta_S_n_vaccination.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_Ea_n_vaccination.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_Eb_n_vaccination.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    dim.delta_R_n_vaccination.set({static_cast<size_t>(n_group), static_cast<size_t>(n_vax)});
    std::vector<real_type> is_child(dim.is_child.size);
    dust2::r::read_real_array(parameters, dim.is_child, is_child.data(), "is_child", true);
    const auto interpolate_daily_doses_children_t = dust2::interpolate::InterpolateConstantArray<real_type, 1>(daily_doses_children_time, daily_doses_children_value, dim.daily_doses_children_t, "daily_doses_children_time", "daily_doses_children_value");
    const auto interpolate_daily_doses_adults_t = dust2::interpolate::InterpolateConstantArray<real_type, 1>(daily_doses_adults_time, daily_doses_adults_value, dim.daily_doses_adults_t, "daily_doses_adults_time", "daily_doses_adults_value");
    std::vector<real_type> prioritisation_strategy_children(dim.prioritisation_strategy_children.size);
    dust2::r::read_real_array(parameters, dim.prioritisation_strategy_children, prioritisation_strategy_children.data(), "prioritisation_strategy_children", true);
    std::vector<real_type> prioritisation_strategy_adults(dim.prioritisation_strategy_adults.size);
    dust2::r::read_real_array(parameters, dim.prioritisation_strategy_adults, prioritisation_strategy_adults.data(), "prioritisation_strategy_adults", true);
    std::vector<real_type> m_gen_pop(dim.m_gen_pop.size);
    dust2::r::read_real_array(parameters, dim.m_gen_pop, m_gen_pop.data(), "m_gen_pop", true);
    std::vector<real_type> m_sex(dim.m_sex.size);
    dust2::r::read_real_array(parameters, dim.m_sex, m_sex.data(), "m_sex", true);
    std::vector<real_type> seed_rate(dim.seed.size);
    dust2::r::read_real_array(parameters, dim.seed, seed_rate.data(), "seed_rate", true);
    std::vector<real_type> S0(dim.S0.size);
    dust2::r::read_real_array(parameters, dim.S0, S0.data(), "S0", true);
    std::vector<real_type> Ea0(dim.Ea0.size);
    dust2::r::read_real_array(parameters, dim.Ea0, Ea0.data(), "Ea0", true);
    std::vector<real_type> Eb0(dim.Eb0.size);
    dust2::r::read_real_array(parameters, dim.Eb0, Eb0.data(), "Eb0", true);
    std::vector<real_type> Ir0(dim.Ir0.size);
    dust2::r::read_real_array(parameters, dim.Ir0, Ir0.data(), "Ir0", true);
    std::vector<real_type> Id0(dim.Id0.size);
    dust2::r::read_real_array(parameters, dim.Id0, Id0.data(), "Id0", true);
    std::vector<real_type> R0(dim.R0.size);
    dust2::r::read_real_array(parameters, dim.R0, R0.data(), "R0", true);
    std::vector<real_type> D0(dim.D0.size);
    dust2::r::read_real_array(parameters, dim.D0, D0.data(), "D0", true);
    std::vector<real_type> beta_z(dim.beta_z.size);
    dust2::r::read_real_array(parameters, dim.beta_z, beta_z.data(), "beta_z", true);
    std::vector<real_type> CFR(dim.CFR.size);
    dust2::r::read_real_array(parameters, dim.CFR, CFR.data(), "CFR", true);
    std::vector<real_type> ve_T(dim.ve_T.size);
    dust2::r::read_real_array(parameters, dim.ve_T, ve_T.data(), "ve_T", true);
    std::vector<real_type> ve_I(dim.ve_I.size);
    dust2::r::read_real_array(parameters, dim.ve_I, ve_I.data(), "ve_I", true);
    std::vector<real_type> lambda_z(dim.lambda_z.size);
    for (size_t i = 1; i <= dim.lambda_z.dim[0]; ++i) {
      for (size_t j = 1; j <= dim.lambda_z.dim[1]; ++j) {
        lambda_z[i - 1 + (j - 1) * dim.lambda_z.mult[1]] = beta_z[i - 1] * (1 - ve_I[i - 1 + (j - 1) * dim.ve_I.mult[1]]);
      }
    }
    shared_state::odin_internals_type odin;
    odin.packing.state = dust2::packing{
      {"prioritisation_step_1st_dose_children", {}},
      {"prioritisation_step_1st_dose_adults", {}},
      {"prioritisation_step_2nd_dose_adults", {}},
      {"cases_inc", {}},
      {"deaths_inc", {}},
      {"cases_cumulative", {}},
      {"deaths_cumulative", {}},
      {"cases_cumulative_hh", {}},
      {"cases_cumulative_s", {}},
      {"cases_cumulative_z", {}},
      {"cases_cumulative_hc", {}},
      {"cases_inc_00_04", {}},
      {"cases_inc_05_14", {}},
      {"cases_inc_15_plus", {}},
      {"cases_inc_PBS", {}},
      {"cases_inc_CSW", {}},
      {"cases_inc_ASW", {}},
      {"cases_inc_SW", {}},
      {"cases_inc_HCW", {}},
      {"deaths_inc_00_04", {}},
      {"deaths_inc_05_14", {}},
      {"deaths_inc_15_plus", {}},
      {"deaths_inc_PBS", {}},
      {"deaths_inc_CSW", {}},
      {"deaths_inc_ASW", {}},
      {"deaths_inc_SW", {}},
      {"deaths_inc_HCW", {}},
      {"dose1_inc", {}},
      {"dose1_inc_00_04", {}},
      {"dose1_inc_05_14", {}},
      {"dose1_inc_15_plus", {}},
      {"dose1_inc_PBS", {}},
      {"dose1_inc_CSW", {}},
      {"dose1_inc_ASW", {}},
      {"dose1_inc_SW", {}},
      {"dose1_inc_HCW", {}},
      {"dose2_inc", {}},
      {"dose2_inc_00_04", {}},
      {"dose2_inc_05_14", {}},
      {"dose2_inc_15_plus", {}},
      {"dose2_inc_PBS", {}},
      {"dose2_inc_CSW", {}},
      {"dose2_inc_ASW", {}},
      {"dose2_inc_SW", {}},
      {"dose2_inc_HCW", {}},
      {"cases_cumulative_00_04", {}},
      {"cases_cumulative_05_14", {}},
      {"cases_cumulative_15_plus", {}},
      {"cases_cumulative_PBS", {}},
      {"cases_cumulative_CSW", {}},
      {"cases_cumulative_ASW", {}},
      {"cases_cumulative_SW", {}},
      {"cases_cumulative_HCW", {}},
      {"deaths_cumulative_00_04", {}},
      {"deaths_cumulative_05_14", {}},
      {"deaths_cumulative_15_plus", {}},
      {"deaths_cumulative_PBS", {}},
      {"deaths_cumulative_CSW", {}},
      {"deaths_cumulative_ASW", {}},
      {"deaths_cumulative_SW", {}},
      {"deaths_cumulative_HCW", {}},
      {"dose1_cumulative", {}},
      {"dose1_cumulative_00_04", {}},
      {"dose1_cumulative_05_14", {}},
      {"dose1_cumulative_15_plus", {}},
      {"dose1_cumulative_PBS", {}},
      {"dose1_cumulative_CSW", {}},
      {"dose1_cumulative_ASW", {}},
      {"dose1_cumulative_SW", {}},
      {"dose1_cumulative_HCW", {}},
      {"dose2_cumulative", {}},
      {"dose2_cumulative_00_04", {}},
      {"dose2_cumulative_05_14", {}},
      {"dose2_cumulative_15_plus", {}},
      {"dose2_cumulative_PBS", {}},
      {"dose2_cumulative_CSW", {}},
      {"dose2_cumulative_ASW", {}},
      {"dose2_cumulative_SW", {}},
      {"dose2_cumulative_HCW", {}},
      {"vax_given_S", {}},
      {"vax_given_Ea", {}},
      {"vax_given_Eb", {}},
      {"vax_given_R", {}},
      {"vax_1stdose_given_S", {}},
      {"vax_1stdose_given_Ea", {}},
      {"vax_1stdose_given_Eb", {}},
      {"vax_1stdose_given_R", {}},
      {"vax_2nddose_given_S", {}},
      {"vax_2nddose_given_Ea", {}},
      {"vax_2nddose_given_Eb", {}},
      {"vax_2nddose_given_R", {}},
      {"S_tot", {}},
      {"E_tot", {}},
      {"I_tot", {}},
      {"R_tot", {}},
      {"D_tot", {}},
      {"N_tot", {}},
      {"total_vax", {}},
      {"total_vax_1stdose", {}},
      {"total_vax_2nddose", {}},
      {"observed_cases_inc_00_04", {}},
      {"observed_cases_inc_05_14", {}},
      {"observed_cases_inc_15_plus", {}},
      {"observed_cases_inc_CSW", {}},
      {"observed_cases_inc_ASW", {}},
      {"observed_cases_inc_SW", {}},
      {"observed_cases_inc_PBS", {}},
      {"observed_cases_inc_HCW", {}},
      {"observed_cases_inc", {}},
      {"S", std::vector<size_t>(dim.S.dim.begin(), dim.S.dim.end())},
      {"Ea", std::vector<size_t>(dim.Ea.dim.begin(), dim.Ea.dim.end())},
      {"Eb", std::vector<size_t>(dim.Eb.dim.begin(), dim.Eb.dim.end())},
      {"Ir", std::vector<size_t>(dim.Ir.dim.begin(), dim.Ir.dim.end())},
      {"Id", std::vector<size_t>(dim.Id.dim.begin(), dim.Id.dim.end())},
      {"R", std::vector<size_t>(dim.R.dim.begin(), dim.R.dim.end())},
      {"D", std::vector<size_t>(dim.D.dim.begin(), dim.D.dim.end())},
      {"E", std::vector<size_t>(dim.E.dim.begin(), dim.E.dim.end())},
      {"I", std::vector<size_t>(dim.I.dim.begin(), dim.I.dim.end())},
      {"N", std::vector<size_t>(dim.N.dim.begin(), dim.N.dim.end())},
      {"A", std::vector<size_t>(dim.A.dim.begin(), dim.A.dim.end())},
      {"cases_cumulative_by_age", std::vector<size_t>(dim.cases_cumulative_by_age.dim.begin(), dim.cases_cumulative_by_age.dim.end())}
    };
    odin.packing.state.copy_offset(odin.offset.state.begin());
    return shared_state{odin, dim, N_prioritisation_steps_children, N_prioritisation_steps_adults, beta_h, beta_s, beta_hcw, gamma_E, gamma_Ir, gamma_Id, n_vax, n_group, exp_noise, phi_00_04, phi_05_14, phi_15_plus, phi_CSW_12_14, phi_CSW_15_17, phi_ASW, phi_HCW, phi_PBS, alpha_cases, alpha_cases_00_04, alpha_cases_05_14, alpha_cases_15_plus, alpha_deaths, alpha_deaths_00_04, alpha_deaths_05_14, alpha_deaths_15_plus, rho_00_04, rho_00_14, daily_doses_children_value, daily_doses_children_time, daily_doses_adults_value, daily_doses_adults_time, is_child, interpolate_daily_doses_children_t, interpolate_daily_doses_adults_t, prioritisation_strategy_children, prioritisation_strategy_adults, m_gen_pop, m_sex, seed_rate, S0, Ea0, Eb0, Ir0, Id0, R0, D0, beta_z, CFR, ve_T, ve_I, lambda_z};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> n_IrR(shared.dim.n_IrR.size);
    std::vector<real_type> n_IdD(shared.dim.n_IdD.size);
    std::vector<real_type> target_met_children_t(shared.dim.target_met_children_t.size);
    std::vector<real_type> target_met_adults_t(shared.dim.target_met_adults_t.size);
    std::vector<real_type> coverage_target_1st_dose_children(shared.dim.coverage_target_1st_dose_children.size);
    std::vector<real_type> coverage_target_1st_dose_adults(shared.dim.coverage_target_1st_dose_adults.size);
    std::vector<real_type> coverage_target_2nd_dose_adults(shared.dim.coverage_target_2nd_dose_adults.size);
    std::vector<real_type> max_vax_remaining(shared.dim.max_vax_remaining.size);
    std::vector<real_type> I_infectious(shared.dim.I_infectious.size);
    std::vector<real_type> delta_R(shared.dim.delta_R.size);
    std::vector<real_type> delta_D(shared.dim.delta_D.size);
    std::vector<real_type> daily_doses_children_t(shared.dim.daily_doses_children_t.size);
    std::vector<real_type> daily_doses_adults_t(shared.dim.daily_doses_adults_t.size);
    std::vector<real_type> give_dose1_children(shared.dim.give_dose1_children.size);
    std::vector<real_type> give_dose1_adults(shared.dim.give_dose1_adults.size);
    std::vector<real_type> give_dose2_adults(shared.dim.give_dose2_adults.size);
    std::vector<real_type> new_D(shared.dim.D.size);
    std::vector<real_type> prop_infectious(shared.dim.prop_infectious.size);
    std::vector<real_type> lambda_hc(shared.dim.lambda_hc.size);
    std::vector<real_type> children_dose1_denom(shared.dim.children_dose1_denom.size);
    std::vector<real_type> adults_dose1_denom(shared.dim.adults_dose1_denom.size);
    std::vector<real_type> adults_dose2_denom(shared.dim.adults_dose2_denom.size);
    std::vector<real_type> s_ij_gen_pop(shared.dim.s_ij_gen_pop.size);
    std::vector<real_type> s_ij_sex(shared.dim.s_ij_sex.size);
    std::vector<real_type> children_dose1_prob(shared.dim.children_dose1_prob.size);
    std::vector<real_type> adults_dose1_prob(shared.dim.adults_dose1_prob.size);
    std::vector<real_type> adults_dose2_prob(shared.dim.adults_dose2_prob.size);
    std::vector<real_type> lambda_hh(shared.dim.lambda_hh.size);
    std::vector<real_type> lambda_s(shared.dim.lambda_s.size);
    std::vector<real_type> children_dose1_group(shared.dim.children_dose1_group.size);
    std::vector<real_type> adults_dose1_group(shared.dim.adults_dose1_group.size);
    std::vector<real_type> adults_dose2_group(shared.dim.adults_dose2_group.size);
    std::vector<real_type> lambda(shared.dim.lambda.size);
    std::vector<real_type> n_vaccination_t_S_children(shared.dim.n_vaccination_t_S_children.size);
    std::vector<real_type> n_vaccination_t_S_adults(shared.dim.n_vaccination_t_S_adults.size);
    std::vector<real_type> p_SE(shared.dim.p_SE.size);
    std::vector<real_type> p_hh(shared.dim.p_hh.size);
    std::vector<real_type> p_s(shared.dim.p_s.size);
    std::vector<real_type> p_hc(shared.dim.p_hc.size);
    std::vector<real_type> n_vaccination_t_Ea_children(shared.dim.n_vaccination_t_Ea_children.size);
    std::vector<real_type> n_vaccination_t_Ea_adults(shared.dim.n_vaccination_t_Ea_adults.size);
    std::vector<real_type> n_vaccination_t_S(shared.dim.n_vaccination_t_S.size);
    std::vector<real_type> n_vaccination_t_Eb_children(shared.dim.n_vaccination_t_Eb_children.size);
    std::vector<real_type> n_vaccination_t_Eb_adults(shared.dim.n_vaccination_t_Eb_adults.size);
    std::vector<real_type> n_vaccination_t_Ea(shared.dim.n_vaccination_t_Ea.size);
    std::vector<real_type> delta_S_n_vaccination(shared.dim.delta_S_n_vaccination.size);
    std::vector<real_type> n_vaccination_t_R_children(shared.dim.n_vaccination_t_R_children.size);
    std::vector<real_type> n_vaccination_t_R_adults(shared.dim.n_vaccination_t_R_adults.size);
    std::vector<real_type> n_vaccination_t_Eb(shared.dim.n_vaccination_t_Eb.size);
    std::vector<real_type> delta_Ea_n_vaccination(shared.dim.delta_Ea_n_vaccination.size);
    std::vector<real_type> n_SEa(shared.dim.n_SEa.size);
    std::vector<real_type> n_vaccination_t_R(shared.dim.n_vaccination_t_R.size);
    std::vector<real_type> delta_Eb_n_vaccination(shared.dim.delta_Eb_n_vaccination.size);
    std::vector<real_type> new_S(shared.dim.S.size);
    std::vector<real_type> n_SEa_hh(shared.dim.n_SEa_hh.size);
    std::vector<real_type> n_EaEb(shared.dim.n_EaEb.size);
    std::vector<real_type> delta_R_n_vaccination(shared.dim.delta_R_n_vaccination.size);
    std::vector<real_type> n_vaccination_t(shared.dim.n_vaccination_t.size);
    std::vector<real_type> n_SEa_s(shared.dim.n_SEa_s.size);
    std::vector<real_type> n_EbI(shared.dim.n_EbI.size);
    std::vector<real_type> delta_Ea(shared.dim.delta_Ea.size);
    std::vector<real_type> new_Ea(shared.dim.Ea.size);
    std::vector<real_type> new_R(shared.dim.R.size);
    std::vector<real_type> n_SEa_hc(shared.dim.n_SEa_hc.size);
    std::vector<real_type> n_EbId(shared.dim.n_EbId.size);
    std::vector<real_type> delta_Eb(shared.dim.delta_Eb.size);
    std::vector<real_type> new_Eb(shared.dim.Eb.size);
    std::vector<real_type> n_SEa_z(shared.dim.n_SEa_z.size);
    std::vector<real_type> n_EbIr(shared.dim.n_EbIr.size);
    std::vector<real_type> delta_Id(shared.dim.delta_Id.size);
    std::vector<real_type> new_Id(shared.dim.Id.size);
    std::vector<real_type> new_E(shared.dim.E.size);
    std::vector<real_type> delta_Ir(shared.dim.delta_Ir.size);
    std::vector<real_type> new_Ir(shared.dim.Ir.size);
    std::vector<real_type> new_I(shared.dim.I.size);
    std::vector<real_type> new_N(shared.dim.N.size);
    std::vector<real_type> new_A(shared.dim.A.size);
    std::vector<real_type> new_target_met_children_t(shared.dim.new_target_met_children_t.size);
    std::vector<real_type> seed(shared.dim.seed.size);
    return internal_state{n_IrR, n_IdD, target_met_children_t, target_met_adults_t, coverage_target_1st_dose_children, coverage_target_1st_dose_adults, coverage_target_2nd_dose_adults, max_vax_remaining, I_infectious, delta_R, delta_D, daily_doses_children_t, daily_doses_adults_t, give_dose1_children, give_dose1_adults, give_dose2_adults, new_D, prop_infectious, lambda_hc, children_dose1_denom, adults_dose1_denom, adults_dose2_denom, s_ij_gen_pop, s_ij_sex, children_dose1_prob, adults_dose1_prob, adults_dose2_prob, lambda_hh, lambda_s, children_dose1_group, adults_dose1_group, adults_dose2_group, lambda, n_vaccination_t_S_children, n_vaccination_t_S_adults, p_SE, p_hh, p_s, p_hc, n_vaccination_t_Ea_children, n_vaccination_t_Ea_adults, n_vaccination_t_S, n_vaccination_t_Eb_children, n_vaccination_t_Eb_adults, n_vaccination_t_Ea, delta_S_n_vaccination, n_vaccination_t_R_children, n_vaccination_t_R_adults, n_vaccination_t_Eb, delta_Ea_n_vaccination, n_SEa, n_vaccination_t_R, delta_Eb_n_vaccination, new_S, n_SEa_hh, n_EaEb, delta_R_n_vaccination, n_vaccination_t, n_SEa_s, n_EbI, delta_Ea, new_Ea, new_R, n_SEa_hc, n_EbId, delta_Eb, new_Eb, n_SEa_z, n_EbIr, delta_Id, new_Id, new_E, delta_Ir, new_Ir, new_I, new_N, new_A, new_target_met_children_t, seed};
  }
  static data_type build_data(cpp11::list data, const shared_state& shared) {
    auto cases = dust2::r::read_real(data, "cases", NA_REAL);
    auto cases_00_04 = dust2::r::read_real(data, "cases_00_04", NA_REAL);
    auto cases_05_14 = dust2::r::read_real(data, "cases_05_14", NA_REAL);
    auto cases_15_plus = dust2::r::read_real(data, "cases_15_plus", NA_REAL);
    auto deaths = dust2::r::read_real(data, "deaths", NA_REAL);
    auto deaths_00_04 = dust2::r::read_real(data, "deaths_00_04", NA_REAL);
    auto deaths_05_14 = dust2::r::read_real(data, "deaths_05_14", NA_REAL);
    auto deaths_15_plus = dust2::r::read_real(data, "deaths_15_plus", NA_REAL);
    auto cfr_00_04 = dust2::r::read_real(data, "cfr_00_04", NA_REAL);
    auto cfr_05_14 = dust2::r::read_real(data, "cfr_05_14", NA_REAL);
    auto cfr_15_plus = dust2::r::read_real(data, "cfr_15_plus", NA_REAL);
    auto cases_total = dust2::r::read_real(data, "cases_total", NA_REAL);
    auto cases_HCW = dust2::r::read_real(data, "cases_HCW", NA_REAL);
    auto cases_SW = dust2::r::read_real(data, "cases_SW", NA_REAL);
    auto cases_00_04_binom = dust2::r::read_real(data, "cases_00_04_binom", NA_REAL);
    auto cases_00_14_binom = dust2::r::read_real(data, "cases_00_14_binom", NA_REAL);
    auto cases_binom = dust2::r::read_real(data, "cases_binom", NA_REAL);
    return data_type{cases, cases_00_04, cases_05_14, cases_15_plus, deaths, deaths_00_04, deaths_05_14, deaths_15_plus, cfr_00_04, cfr_05_14, cfr_15_plus, cases_total, cases_HCW, cases_SW, cases_00_04_binom, cases_00_14_binom, cases_binom};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.beta_h = dust2::r::read_real(parameters, "beta_h", shared.beta_h);
    shared.beta_s = dust2::r::read_real(parameters, "beta_s", shared.beta_s);
    shared.beta_hcw = dust2::r::read_real(parameters, "beta_hcw", shared.beta_hcw);
    shared.gamma_E = dust2::r::read_real(parameters, "gamma_E", shared.gamma_E);
    shared.gamma_Ir = dust2::r::read_real(parameters, "gamma_Ir", shared.gamma_Ir);
    shared.gamma_Id = dust2::r::read_real(parameters, "gamma_Id", shared.gamma_Id);
    shared.exp_noise = dust2::r::read_real(parameters, "exp_noise", shared.exp_noise);
    shared.phi_00_04 = dust2::r::read_real(parameters, "phi_00_04", shared.phi_00_04);
    shared.phi_05_14 = dust2::r::read_real(parameters, "phi_05_14", shared.phi_05_14);
    shared.phi_15_plus = dust2::r::read_real(parameters, "phi_15_plus", shared.phi_15_plus);
    shared.phi_CSW_12_14 = dust2::r::read_real(parameters, "phi_CSW_12_14", shared.phi_CSW_12_14);
    shared.phi_CSW_15_17 = dust2::r::read_real(parameters, "phi_CSW_15_17", shared.phi_CSW_15_17);
    shared.phi_ASW = dust2::r::read_real(parameters, "phi_ASW", shared.phi_ASW);
    shared.phi_HCW = dust2::r::read_real(parameters, "phi_HCW", shared.phi_HCW);
    shared.phi_PBS = dust2::r::read_real(parameters, "phi_PBS", shared.phi_PBS);
    shared.alpha_cases = dust2::r::read_real(parameters, "alpha_cases", shared.alpha_cases);
    shared.alpha_cases_00_04 = dust2::r::read_real(parameters, "alpha_cases_00_04", shared.alpha_cases_00_04);
    shared.alpha_cases_05_14 = dust2::r::read_real(parameters, "alpha_cases_05_14", shared.alpha_cases_05_14);
    shared.alpha_cases_15_plus = dust2::r::read_real(parameters, "alpha_cases_15_plus", shared.alpha_cases_15_plus);
    shared.alpha_deaths = dust2::r::read_real(parameters, "alpha_deaths", shared.alpha_deaths);
    shared.alpha_deaths_00_04 = dust2::r::read_real(parameters, "alpha_deaths_00_04", shared.alpha_deaths_00_04);
    shared.alpha_deaths_05_14 = dust2::r::read_real(parameters, "alpha_deaths_05_14", shared.alpha_deaths_05_14);
    shared.alpha_deaths_15_plus = dust2::r::read_real(parameters, "alpha_deaths_15_plus", shared.alpha_deaths_15_plus);
    shared.rho_00_04 = dust2::r::read_real(parameters, "rho_00_04", shared.rho_00_04);
    shared.rho_00_14 = dust2::r::read_real(parameters, "rho_00_14", shared.rho_00_14);
    dust2::r::read_real_array(parameters, shared.dim.daily_doses_children_value, shared.daily_doses_children_value.data(), "daily_doses_children_value", false);
    dust2::r::read_real_array(parameters, shared.dim.daily_doses_children_time, shared.daily_doses_children_time.data(), "daily_doses_children_time", false);
    dust2::r::read_real_array(parameters, shared.dim.daily_doses_adults_value, shared.daily_doses_adults_value.data(), "daily_doses_adults_value", false);
    dust2::r::read_real_array(parameters, shared.dim.daily_doses_adults_time, shared.daily_doses_adults_time.data(), "daily_doses_adults_time", false);
    dust2::r::read_real_array(parameters, shared.dim.is_child, shared.is_child.data(), "is_child", false);
    const auto interpolate_daily_doses_children_t = dust2::interpolate::InterpolateConstantArray<real_type, 1>(shared.daily_doses_children_time, shared.daily_doses_children_value, shared.dim.daily_doses_children_t, "daily_doses_children_time", "daily_doses_children_value");
    const auto interpolate_daily_doses_adults_t = dust2::interpolate::InterpolateConstantArray<real_type, 1>(shared.daily_doses_adults_time, shared.daily_doses_adults_value, shared.dim.daily_doses_adults_t, "daily_doses_adults_time", "daily_doses_adults_value");
    dust2::r::read_real_array(parameters, shared.dim.prioritisation_strategy_children, shared.prioritisation_strategy_children.data(), "prioritisation_strategy_children", false);
    dust2::r::read_real_array(parameters, shared.dim.prioritisation_strategy_adults, shared.prioritisation_strategy_adults.data(), "prioritisation_strategy_adults", false);
    dust2::r::read_real_array(parameters, shared.dim.m_gen_pop, shared.m_gen_pop.data(), "m_gen_pop", false);
    dust2::r::read_real_array(parameters, shared.dim.m_sex, shared.m_sex.data(), "m_sex", false);
    dust2::r::read_real_array(parameters, shared.dim.seed, shared.seed_rate.data(), "seed_rate", false);
    dust2::r::read_real_array(parameters, shared.dim.S0, shared.S0.data(), "S0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ea0, shared.Ea0.data(), "Ea0", false);
    dust2::r::read_real_array(parameters, shared.dim.Eb0, shared.Eb0.data(), "Eb0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ir0, shared.Ir0.data(), "Ir0", false);
    dust2::r::read_real_array(parameters, shared.dim.Id0, shared.Id0.data(), "Id0", false);
    dust2::r::read_real_array(parameters, shared.dim.R0, shared.R0.data(), "R0", false);
    dust2::r::read_real_array(parameters, shared.dim.D0, shared.D0.data(), "D0", false);
    dust2::r::read_real_array(parameters, shared.dim.beta_z, shared.beta_z.data(), "beta_z", false);
    dust2::r::read_real_array(parameters, shared.dim.CFR, shared.CFR.data(), "CFR", false);
    dust2::r::read_real_array(parameters, shared.dim.ve_T, shared.ve_T.data(), "ve_T", false);
    dust2::r::read_real_array(parameters, shared.dim.ve_I, shared.ve_I.data(), "ve_I", false);
    for (size_t i = 1; i <= shared.dim.lambda_z.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda_z.dim[1]; ++j) {
        shared.lambda_z[i - 1 + (j - 1) * shared.dim.lambda_z.mult[1]] = shared.beta_z[i - 1] * (1 - shared.ve_I[i - 1 + (j - 1) * shared.dim.ve_I.mult[1]]);
      }
    }
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    for (size_t i = 1; i <= shared.dim.seed.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.seed.dim[1]; ++j) {
        internal.seed[i - 1 + (j - 1) * shared.dim.seed.mult[1]] = monty::math::min(monty::random::poisson<real_type>(rng_state, shared.seed_rate[i - 1 + (j - 1) * shared.dim.seed.mult[1]]), shared.S0[i - 1 + (j - 1) * shared.dim.S0.mult[1]]);
      }
    }
    state[0] = 1;
    state[1] = 1;
    state[2] = 1;
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.S.mult[1] + 109] = shared.S0[i - 1 + (j - 1) * shared.dim.S0.mult[1]] - internal.seed[i - 1 + (j - 1) * shared.dim.seed.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ea.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.Ea.mult[1] + shared.odin.offset.state[110]] = shared.Ea0[i - 1 + (j - 1) * shared.dim.Ea0.mult[1]] + internal.seed[i - 1 + (j - 1) * shared.dim.seed.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Eb.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.Eb.mult[1] + shared.odin.offset.state[111]] = shared.Eb0[i - 1 + (j - 1) * shared.dim.Eb0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ir.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.Ir.mult[1] + shared.odin.offset.state[112]] = shared.Ir0[i - 1 + (j - 1) * shared.dim.Ir0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Id.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.Id.mult[1] + shared.odin.offset.state[113]] = shared.Id0[i - 1 + (j - 1) * shared.dim.Id0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.R.mult[1] + shared.odin.offset.state[114]] = shared.R0[i - 1 + (j - 1) * shared.dim.R0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.D.mult[1] + shared.odin.offset.state[115]] = shared.D0[i - 1 + (j - 1) * shared.dim.D0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.E.mult[1] + shared.odin.offset.state[116]] = shared.Ea0[i - 1 + (j - 1) * shared.dim.Ea0.mult[1]] + shared.Eb0[i - 1 + (j - 1) * shared.dim.Eb0.mult[1]] + internal.seed[i - 1 + (j - 1) * shared.dim.seed.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.I.mult[1] + shared.odin.offset.state[117]] = shared.Ir0[i - 1 + (j - 1) * shared.dim.Ir0.mult[1]] + shared.Id0[i - 1 + (j - 1) * shared.dim.Id0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.N.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.N.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.N.mult[1] + shared.odin.offset.state[118]] = shared.S0[i - 1 + (j - 1) * shared.dim.S0.mult[1]] + shared.Ea0[i - 1 + (j - 1) * shared.dim.Ea0.mult[1]] + shared.Eb0[i - 1 + (j - 1) * shared.dim.Eb0.mult[1]] + shared.Ir0[i - 1 + (j - 1) * shared.dim.Ir0.mult[1]] + shared.Id0[i - 1 + (j - 1) * shared.dim.Id0.mult[1]] + shared.R0[i - 1 + (j - 1) * shared.dim.R0.mult[1]] + shared.D0[i - 1 + (j - 1) * shared.dim.D0.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.A.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.A.dim[1]; ++j) {
        state[i - 1 + (j - 1) * shared.dim.A.mult[1] + shared.odin.offset.state[119]] = shared.S0[i - 1 + (j - 1) * shared.dim.S0.mult[1]] + shared.Ea0[i - 1 + (j - 1) * shared.dim.Ea0.mult[1]] + shared.Eb0[i - 1 + (j - 1) * shared.dim.Eb0.mult[1]] + shared.Ir0[i - 1 + (j - 1) * shared.dim.Ir0.mult[1]] + shared.Id0[i - 1 + (j - 1) * shared.dim.Id0.mult[1]] + shared.R0[i - 1 + (j - 1) * shared.dim.R0.mult[1]];
      }
    }
    state[3] = 0;
    state[4] = 0;
    state[5] = 0;
    state[6] = 0;
    state[7] = 0;
    state[8] = 0;
    state[9] = 0;
    state[10] = 0;
    state[11] = 0;
    state[12] = 0;
    state[13] = 0;
    state[14] = 0;
    state[15] = 0;
    state[16] = 0;
    state[17] = 0;
    state[18] = 0;
    state[19] = 0;
    state[20] = 0;
    state[21] = 0;
    state[22] = 0;
    state[23] = 0;
    state[24] = 0;
    state[25] = 0;
    state[26] = 0;
    state[27] = 0;
    state[28] = 0;
    state[29] = 0;
    state[30] = 0;
    state[31] = 0;
    state[32] = 0;
    state[33] = 0;
    state[34] = 0;
    state[35] = 0;
    state[36] = 0;
    state[37] = 0;
    state[38] = 0;
    state[39] = 0;
    state[40] = 0;
    state[41] = 0;
    state[42] = 0;
    state[43] = 0;
    state[44] = 0;
    for (size_t i = 1; i <= shared.dim.cases_cumulative_by_age.size; ++i) {
      state[i - 1 + shared.odin.offset.state[120]] = 0;
    }
    state[45] = 0;
    state[46] = 0;
    state[47] = 0;
    state[48] = 0;
    state[49] = 0;
    state[50] = 0;
    state[51] = 0;
    state[52] = 0;
    state[53] = 0;
    state[54] = 0;
    state[55] = 0;
    state[56] = 0;
    state[57] = 0;
    state[58] = 0;
    state[59] = 0;
    state[60] = 0;
    state[61] = 0;
    state[62] = 0;
    state[63] = 0;
    state[64] = 0;
    state[65] = 0;
    state[66] = 0;
    state[67] = 0;
    state[68] = 0;
    state[69] = 0;
    state[70] = 0;
    state[71] = 0;
    state[72] = 0;
    state[73] = 0;
    state[74] = 0;
    state[75] = 0;
    state[76] = 0;
    state[77] = 0;
    state[78] = 0;
    state[79] = 0;
    state[80] = 0;
    state[81] = 0;
    state[82] = 0;
    state[83] = 0;
    state[84] = 0;
    state[85] = 0;
    state[86] = 0;
    state[87] = 0;
    state[88] = 0;
    state[89] = 0;
    state[90] = 0;
    state[91] = dust2::array::sum<real_type>(shared.S0.data(), shared.dim.S0) - dust2::array::sum<real_type>(internal.seed.data(), shared.dim.seed);
    state[92] = dust2::array::sum<real_type>(shared.Ea0.data(), shared.dim.Ea0) + dust2::array::sum<real_type>(shared.Eb0.data(), shared.dim.Eb0) + dust2::array::sum<real_type>(internal.seed.data(), shared.dim.seed);
    state[93] = dust2::array::sum<real_type>(shared.Ir0.data(), shared.dim.Ir0) + dust2::array::sum<real_type>(shared.Id0.data(), shared.dim.Id0);
    state[94] = dust2::array::sum<real_type>(shared.R0.data(), shared.dim.R0);
    state[95] = dust2::array::sum<real_type>(shared.D0.data(), shared.dim.D0);
    state[96] = dust2::array::sum<real_type>(shared.S0.data(), shared.dim.S0) + dust2::array::sum<real_type>(shared.Ea0.data(), shared.dim.Ea0) + dust2::array::sum<real_type>(shared.Eb0.data(), shared.dim.Eb0) + dust2::array::sum<real_type>(shared.Ir0.data(), shared.dim.Ir0) + dust2::array::sum<real_type>(shared.Id0.data(), shared.dim.Id0) + dust2::array::sum<real_type>(shared.R0.data(), shared.dim.R0) + dust2::array::sum<real_type>(shared.D0.data(), shared.dim.D0);
    state[97] = 0;
    state[98] = 0;
    state[99] = 0;
    state[100] = 0;
    state[101] = 0;
    state[102] = 0;
    state[103] = 0;
    state[104] = 0;
    state[105] = 0;
    state[106] = 0;
    state[107] = 0;
    state[108] = 0;
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto prioritisation_step_1st_dose_children = state[0];
    const auto prioritisation_step_1st_dose_adults = state[1];
    const auto prioritisation_step_2nd_dose_adults = state[2];
    const auto * S = state + 109;
    const auto * Ea = state + shared.odin.offset.state[110];
    const auto * Eb = state + shared.odin.offset.state[111];
    const auto * Ir = state + shared.odin.offset.state[112];
    const auto * Id = state + shared.odin.offset.state[113];
    const auto * R = state + shared.odin.offset.state[114];
    const auto * D = state + shared.odin.offset.state[115];
    const auto * I = state + shared.odin.offset.state[117];
    const auto * N = state + shared.odin.offset.state[118];
    const auto * A = state + shared.odin.offset.state[119];
    const auto cases_inc = state[3];
    const auto deaths_inc = state[4];
    const auto cases_cumulative = state[5];
    const auto deaths_cumulative = state[6];
    const auto cases_cumulative_hh = state[7];
    const auto cases_cumulative_s = state[8];
    const auto cases_cumulative_z = state[9];
    const auto cases_cumulative_hc = state[10];
    const auto cases_inc_00_04 = state[11];
    const auto cases_inc_05_14 = state[12];
    const auto cases_inc_15_plus = state[13];
    const auto cases_inc_PBS = state[14];
    const auto cases_inc_CSW = state[15];
    const auto cases_inc_ASW = state[16];
    const auto cases_inc_SW = state[17];
    const auto cases_inc_HCW = state[18];
    const auto deaths_inc_00_04 = state[19];
    const auto deaths_inc_05_14 = state[20];
    const auto deaths_inc_15_plus = state[21];
    const auto deaths_inc_PBS = state[22];
    const auto deaths_inc_CSW = state[23];
    const auto deaths_inc_ASW = state[24];
    const auto deaths_inc_SW = state[25];
    const auto deaths_inc_HCW = state[26];
    const auto dose1_inc = state[27];
    const auto dose1_inc_00_04 = state[28];
    const auto dose1_inc_05_14 = state[29];
    const auto dose1_inc_15_plus = state[30];
    const auto dose1_inc_PBS = state[31];
    const auto dose1_inc_CSW = state[32];
    const auto dose1_inc_ASW = state[33];
    const auto dose1_inc_SW = state[34];
    const auto dose1_inc_HCW = state[35];
    const auto dose2_inc = state[36];
    const auto dose2_inc_00_04 = state[37];
    const auto dose2_inc_05_14 = state[38];
    const auto dose2_inc_15_plus = state[39];
    const auto dose2_inc_PBS = state[40];
    const auto dose2_inc_CSW = state[41];
    const auto dose2_inc_ASW = state[42];
    const auto dose2_inc_SW = state[43];
    const auto dose2_inc_HCW = state[44];
    const auto * cases_cumulative_by_age = state + shared.odin.offset.state[120];
    const auto cases_cumulative_00_04 = state[45];
    const auto cases_cumulative_05_14 = state[46];
    const auto cases_cumulative_15_plus = state[47];
    const auto cases_cumulative_PBS = state[48];
    const auto cases_cumulative_CSW = state[49];
    const auto cases_cumulative_ASW = state[50];
    const auto cases_cumulative_SW = state[51];
    const auto cases_cumulative_HCW = state[52];
    const auto deaths_cumulative_00_04 = state[53];
    const auto deaths_cumulative_05_14 = state[54];
    const auto deaths_cumulative_15_plus = state[55];
    const auto deaths_cumulative_PBS = state[56];
    const auto deaths_cumulative_CSW = state[57];
    const auto deaths_cumulative_ASW = state[58];
    const auto deaths_cumulative_SW = state[59];
    const auto deaths_cumulative_HCW = state[60];
    const auto dose1_cumulative = state[61];
    const auto dose1_cumulative_00_04 = state[62];
    const auto dose1_cumulative_05_14 = state[63];
    const auto dose1_cumulative_15_plus = state[64];
    const auto dose1_cumulative_PBS = state[65];
    const auto dose1_cumulative_CSW = state[66];
    const auto dose1_cumulative_ASW = state[67];
    const auto dose1_cumulative_SW = state[68];
    const auto dose1_cumulative_HCW = state[69];
    const auto dose2_cumulative = state[70];
    const auto dose2_cumulative_00_04 = state[71];
    const auto dose2_cumulative_05_14 = state[72];
    const auto dose2_cumulative_15_plus = state[73];
    const auto dose2_cumulative_PBS = state[74];
    const auto dose2_cumulative_CSW = state[75];
    const auto dose2_cumulative_ASW = state[76];
    const auto dose2_cumulative_SW = state[77];
    const auto dose2_cumulative_HCW = state[78];
    const auto total_vax = state[97];
    const auto total_vax_1stdose = state[98];
    const auto total_vax_2nddose = state[99];
    const auto observed_cases_inc_00_04 = state[100];
    const auto observed_cases_inc_05_14 = state[101];
    const auto observed_cases_inc_15_plus = state[102];
    const auto observed_cases_inc_CSW = state[103];
    const auto observed_cases_inc_ASW = state[104];
    const auto observed_cases_inc_SW = state[105];
    const auto observed_cases_inc_PBS = state[106];
    const auto observed_cases_inc_HCW = state[107];
    const auto observed_cases_inc = state[108];
    const real_type p_EE = 1 - monty::math::exp(-shared.gamma_E * 2 * dt);
    const real_type p_EI = 1 - monty::math::exp(-shared.gamma_E * 2 * dt);
    const real_type p_IrR = 1 - monty::math::exp(-shared.gamma_Ir * dt);
    const real_type p_IdD = 1 - monty::math::exp(-shared.gamma_Id * dt);
    for (size_t i = 1; i <= shared.dim.n_IrR.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_IrR.dim[1]; ++j) {
        internal.n_IrR[i - 1 + (j - 1) * shared.dim.n_IrR.mult[1]] = monty::random::binomial<real_type>(rng_state, Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]], p_IrR);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_IdD.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_IdD.dim[1]; ++j) {
        internal.n_IdD[i - 1 + (j - 1) * shared.dim.n_IdD.mult[1]] = monty::random::binomial<real_type>(rng_state, Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]], p_IdD);
      }
    }
    for (size_t i = 1; i <= shared.dim.target_met_children_t.size; ++i) {
      internal.target_met_children_t[i - 1] = 0;
    }
    for (size_t i = 1; i <= shared.dim.target_met_children_t.size; ++i) {
      internal.target_met_children_t[i - 1] = ((dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {2, 3}) * shared.is_child[i - 1]) > shared.prioritisation_strategy_children[i - 1 + (prioritisation_step_1st_dose_children - 1) * shared.dim.prioritisation_strategy_children.mult[1]] * dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {1, 3}));
    }
    for (size_t i = 1; i <= shared.dim.target_met_adults_t.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.target_met_adults_t.dim[1]; ++j) {
        internal.target_met_adults_t[i - 1 + (j - 1) * shared.dim.target_met_adults_t.mult[1]] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.target_met_adults_t.dim[0]; ++i) {
      internal.target_met_adults_t[i - 1 + 2 * shared.dim.target_met_adults_t.mult[1]] = ((dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {2, 3}) * (1 - shared.is_child[i - 1])) > shared.prioritisation_strategy_adults[i - 1 + (prioritisation_step_1st_dose_adults - 1) * shared.dim.prioritisation_strategy_adults.mult[1]] * dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {1, 3}));
    }
    for (size_t i = 1; i <= shared.dim.target_met_adults_t.dim[0]; ++i) {
      internal.target_met_adults_t[i - 1 + 3 * shared.dim.target_met_adults_t.mult[1]] = ((A[i - 1 + 3 * shared.dim.A.mult[1]] * (1 - shared.is_child[i - 1])) > shared.prioritisation_strategy_adults[i - 1 + (prioritisation_step_2nd_dose_adults - 1) * shared.dim.prioritisation_strategy_adults.mult[1]] * dust2::array::sum<real_type>(A, shared.dim.A, {i - 1, i - 1}, {1, 3}));
    }
    for (size_t i = 1; i <= shared.dim.coverage_target_1st_dose_children.size; ++i) {
      internal.coverage_target_1st_dose_children[i - 1] = monty::math::ceil(shared.prioritisation_strategy_children[i - 1 + (prioritisation_step_1st_dose_children - 1) * shared.dim.prioritisation_strategy_children.mult[1]]);
    }
    for (size_t i = 1; i <= shared.dim.coverage_target_1st_dose_adults.size; ++i) {
      internal.coverage_target_1st_dose_adults[i - 1] = monty::math::ceil(shared.prioritisation_strategy_adults[i - 1 + (prioritisation_step_1st_dose_adults - 1) * shared.dim.prioritisation_strategy_adults.mult[1]]);
    }
    for (size_t i = 1; i <= shared.dim.coverage_target_2nd_dose_adults.size; ++i) {
      internal.coverage_target_2nd_dose_adults[i - 1] = monty::math::ceil(shared.prioritisation_strategy_adults[i - 1 + (prioritisation_step_2nd_dose_adults - 1) * shared.dim.prioritisation_strategy_adults.mult[1]]);
    }
    for (size_t i = 1; i <= shared.dim.max_vax_remaining.size; ++i) {
      internal.max_vax_remaining[i - 1] = (monty::math::ceil((shared.prioritisation_strategy_children[i - 1 + (shared.N_prioritisation_steps_children - 1) * shared.dim.prioritisation_strategy_children.mult[1]] + shared.prioritisation_strategy_adults[i - 1 + (shared.N_prioritisation_steps_adults - 1) * shared.dim.prioritisation_strategy_adults.mult[1]]) * dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {1, 3})) - dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {2, 3})) + 1;
    }
    const real_type new_deaths_00_04 = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {0, 0}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_SW_12_14 = monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {16, 16}, {0, shared.dim.n_IdD.dim[1] - 1}), static_cast<real_type>(0.5));
    const real_type new_deaths_CSW = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {16, 16}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_ASW = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {17, 17}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_PBS = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {18, 18}, {0, shared.dim.n_IdD.dim[1] - 1});
    const real_type new_deaths_HCW = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {19, 19}, {0, shared.dim.n_IdD.dim[1] - 1});
    for (size_t i = 1; i <= shared.dim.I_infectious.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I_infectious.dim[1]; ++j) {
        internal.I_infectious[i - 1 + (j - 1) * shared.dim.I_infectious.mult[1]] = I[i - 1 + (j - 1) * shared.dim.I.mult[1]] * (1 - shared.ve_T[j - 1]);
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_R.dim[1]; ++j) {
        internal.delta_R[i - 1 + (j - 1) * shared.dim.delta_R.mult[1]] = internal.n_IrR[i - 1 + (j - 1) * shared.dim.n_IrR.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_D.dim[1]; ++j) {
        internal.delta_D[i - 1 + (j - 1) * shared.dim.delta_D.mult[1]] = internal.n_IdD[i - 1 + (j - 1) * shared.dim.n_IdD.mult[1]];
      }
    }
    shared.interpolate_daily_doses_children_t.eval(time, internal.daily_doses_children_t);
    shared.interpolate_daily_doses_adults_t.eval(time, internal.daily_doses_adults_t);
    const real_type prioritisation_step_1st_dose_adults_proposal = (dust2::array::sum<real_type>(internal.target_met_adults_t.data(), shared.dim.target_met_adults_t, {0, shared.dim.target_met_adults_t.dim[0] - 1}, {2, 2}) == dust2::array::sum<real_type>(internal.coverage_target_1st_dose_adults.data(), shared.dim.coverage_target_1st_dose_adults) ? prioritisation_step_1st_dose_adults + 1 : prioritisation_step_1st_dose_adults);
    const real_type prioritisation_step_2nd_dose_adults_proposal = (dust2::array::sum<real_type>(internal.target_met_adults_t.data(), shared.dim.target_met_adults_t, {0, shared.dim.target_met_adults_t.dim[0] - 1}, {3, 3}) == dust2::array::sum<real_type>(internal.coverage_target_2nd_dose_adults.data(), shared.dim.coverage_target_2nd_dose_adults) ? prioritisation_step_2nd_dose_adults + 1 : prioritisation_step_2nd_dose_adults);
    for (size_t i = 1; i <= shared.dim.give_dose1_children.size; ++i) {
      internal.give_dose1_children[i - 1] = shared.is_child[i - 1] * internal.coverage_target_1st_dose_children[i - 1] * (1 - internal.target_met_children_t[i - 1]);
    }
    for (size_t i = 1; i <= shared.dim.give_dose1_adults.size; ++i) {
      internal.give_dose1_adults[i - 1] = (1 - shared.is_child[i - 1]) * internal.coverage_target_1st_dose_adults[i - 1] * (1 - internal.target_met_adults_t[i - 1 + 2 * shared.dim.target_met_adults_t.mult[1]]);
    }
    for (size_t i = 1; i <= shared.dim.give_dose2_adults.size; ++i) {
      internal.give_dose2_adults[i - 1] = (1 - shared.is_child[i - 1]) * internal.coverage_target_2nd_dose_adults[i - 1] * (1 - internal.target_met_adults_t[i - 1 + 3 * shared.dim.target_met_adults_t.mult[1]]);
    }
    for (size_t i = 1; i <= shared.dim.D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D.dim[1]; ++j) {
        internal.new_D[i - 1 + (j - 1) * shared.dim.D.mult[1]] = D[i - 1 + (j - 1) * shared.dim.D.mult[1]] + internal.delta_D[i - 1 + (j - 1) * shared.dim.delta_D.mult[1]];
      }
    }
    const real_type new_deaths_SW_15_17 = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {16, 16}, {0, shared.dim.n_IdD.dim[1] - 1}) - new_deaths_SW_12_14;
    const real_type new_deaths_05_14 = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {1, 2}, {0, shared.dim.n_IdD.dim[1] - 1}) + new_deaths_SW_12_14;
    const real_type new_deaths_SW = new_deaths_CSW + new_deaths_ASW;
    for (size_t i = 1; i <= shared.dim.prop_infectious.size; ++i) {
      internal.prop_infectious[i - 1] = (dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {0, shared.dim.N.dim[1] - 1}) == 0 ? 0 : dust2::array::sum<real_type>(internal.I_infectious.data(), shared.dim.I_infectious, {i - 1, i - 1}, {0, shared.dim.I_infectious.dim[1] - 1}) / dust2::array::sum<real_type>(N, shared.dim.N, {i - 1, i - 1}, {0, shared.dim.N.dim[1] - 1}));
    }
    for (size_t i = 1; i <= shared.dim.lambda_hc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda_hc.dim[1]; ++j) {
        internal.lambda_hc[i - 1 + (j - 1) * shared.dim.lambda_hc.mult[1]] = (i == 20 ? shared.beta_hcw * dust2::array::sum<real_type>(internal.I_infectious.data(), shared.dim.I_infectious) / dust2::array::sum<real_type>(N, shared.dim.N) * (1 - shared.ve_I[i - 1 + (j - 1) * shared.dim.ve_I.mult[1]]) : 0);
      }
    }
    for (size_t i = 1; i <= shared.dim.children_dose1_denom.size; ++i) {
      internal.children_dose1_denom[i - 1] = (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]]) * internal.give_dose1_children[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.adults_dose1_denom.size; ++i) {
      internal.adults_dose1_denom[i - 1] = (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]]) * internal.give_dose1_adults[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.adults_dose2_denom.size; ++i) {
      internal.adults_dose2_denom[i - 1] = (S[i - 1 + 2 * shared.dim.S.mult[1]] + Ea[i - 1 + 2 * shared.dim.Ea.mult[1]] + Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]]) * internal.give_dose2_adults[i - 1];
    }
    const real_type new_deaths_15_plus = dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {3, 15}, {0, shared.dim.n_IdD.dim[1] - 1}) + new_deaths_SW_15_17 + dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD, {17, 19}, {0, shared.dim.n_IdD.dim[1] - 1});
    for (size_t i = 1; i <= shared.dim.s_ij_gen_pop.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.s_ij_gen_pop.dim[1]; ++j) {
        internal.s_ij_gen_pop[i - 1 + (j - 1) * shared.dim.s_ij_gen_pop.mult[1]] = shared.m_gen_pop[i - 1 + (j - 1) * shared.dim.m_gen_pop.mult[1]] * internal.prop_infectious[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.s_ij_sex.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.s_ij_sex.dim[1]; ++j) {
        internal.s_ij_sex[i - 1 + (j - 1) * shared.dim.s_ij_sex.mult[1]] = shared.m_sex[i - 1 + (j - 1) * shared.dim.m_sex.mult[1]] * internal.prop_infectious[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.children_dose1_prob.size; ++i) {
      internal.children_dose1_prob[i - 1] = (dust2::array::sum<real_type>(internal.children_dose1_denom.data(), shared.dim.children_dose1_denom) == 0 ? 0 : internal.children_dose1_denom[i - 1] / dust2::array::sum<real_type>(internal.children_dose1_denom.data(), shared.dim.children_dose1_denom));
    }
    for (size_t i = 1; i <= shared.dim.adults_dose1_prob.size; ++i) {
      internal.adults_dose1_prob[i - 1] = (dust2::array::sum<real_type>(internal.adults_dose1_denom.data(), shared.dim.adults_dose1_denom) == 0 ? 0 : internal.adults_dose1_denom[i - 1] / dust2::array::sum<real_type>(internal.adults_dose1_denom.data(), shared.dim.adults_dose1_denom));
    }
    for (size_t i = 1; i <= shared.dim.adults_dose2_prob.size; ++i) {
      internal.adults_dose2_prob[i - 1] = (dust2::array::sum<real_type>(internal.adults_dose2_denom.data(), shared.dim.adults_dose2_denom) == 0 ? 0 : internal.adults_dose2_denom[i - 1] / dust2::array::sum<real_type>(internal.adults_dose2_denom.data(), shared.dim.adults_dose2_denom));
    }
    for (size_t i = 1; i <= shared.dim.lambda_hh.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda_hh.dim[1]; ++j) {
        internal.lambda_hh[i - 1 + (j - 1) * shared.dim.lambda_hh.mult[1]] = shared.beta_h * dust2::array::sum<real_type>(internal.s_ij_gen_pop.data(), shared.dim.s_ij_gen_pop, {i - 1, i - 1}, {0, shared.dim.s_ij_gen_pop.dim[1] - 1}) * (1 - shared.ve_I[i - 1 + (j - 1) * shared.dim.ve_I.mult[1]]);
      }
    }
    for (size_t i = 1; i <= shared.dim.lambda_s.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda_s.dim[1]; ++j) {
        internal.lambda_s[i - 1 + (j - 1) * shared.dim.lambda_s.mult[1]] = shared.beta_s * dust2::array::sum<real_type>(internal.s_ij_sex.data(), shared.dim.s_ij_sex, {i - 1, i - 1}, {0, shared.dim.s_ij_sex.dim[1] - 1}) * (1 - shared.ve_I[i - 1 + (j - 1) * shared.dim.ve_I.mult[1]]);
      }
    }
    internal.children_dose1_group[0] = (dust2::array::sum<real_type>(internal.children_dose1_denom.data(), shared.dim.children_dose1_denom) == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.daily_doses_children_t[1], internal.children_dose1_prob[0]), internal.max_vax_remaining[0]));
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_group); ++i) {
      internal.children_dose1_group[i - 1] = (dust2::array::sum<real_type>(internal.children_dose1_prob.data(), shared.dim.children_dose1_prob, {i - 1, shared.n_group - 1}) == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.daily_doses_children_t[1] - dust2::array::sum<real_type>(internal.children_dose1_group.data(), shared.dim.children_dose1_group, {0, (i - 1) - 1}), internal.children_dose1_prob[i - 1] / dust2::array::sum<real_type>(internal.children_dose1_prob.data(), shared.dim.children_dose1_prob, {i - 1, shared.n_group - 1})), internal.max_vax_remaining[i - 1]));
    }
    internal.adults_dose1_group[0] = (dust2::array::sum<real_type>(internal.adults_dose1_denom.data(), shared.dim.adults_dose1_denom) == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.daily_doses_adults_t[1], internal.adults_dose1_prob[0]), internal.max_vax_remaining[0]));
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_group); ++i) {
      internal.adults_dose1_group[i - 1] = (dust2::array::sum<real_type>(internal.adults_dose1_prob.data(), shared.dim.adults_dose1_prob, {i - 1, shared.n_group - 1}) == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.daily_doses_adults_t[1] - dust2::array::sum<real_type>(internal.adults_dose1_group.data(), shared.dim.adults_dose1_group, {0, (i - 1) - 1}), internal.adults_dose1_prob[i - 1] / dust2::array::sum<real_type>(internal.adults_dose1_prob.data(), shared.dim.adults_dose1_prob, {i - 1, shared.n_group - 1})), internal.max_vax_remaining[i - 1]));
    }
    internal.adults_dose2_group[0] = (dust2::array::sum<real_type>(internal.adults_dose2_denom.data(), shared.dim.adults_dose2_denom) == 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.daily_doses_adults_t[2], internal.adults_dose2_prob[0]));
    for (size_t i = 2; i <= static_cast<size_t>(shared.n_group); ++i) {
      internal.adults_dose2_group[i - 1] = (dust2::array::sum<real_type>(internal.adults_dose2_prob.data(), shared.dim.adults_dose2_prob, {i - 1, shared.n_group - 1}) == 0 ? 0 : monty::random::binomial<real_type>(rng_state, internal.daily_doses_adults_t[2] - dust2::array::sum<real_type>(internal.adults_dose2_group.data(), shared.dim.adults_dose2_group, {0, (i - 1) - 1}), internal.adults_dose2_prob[i - 1] / dust2::array::sum<real_type>(internal.adults_dose2_prob.data(), shared.dim.adults_dose2_prob, {i - 1, shared.n_group - 1})));
    }
    for (size_t i = 1; i <= shared.dim.lambda.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.lambda.dim[1]; ++j) {
        internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] = internal.lambda_hh[i - 1 + (j - 1) * shared.dim.lambda_hh.mult[1]] + internal.lambda_s[i - 1 + (j - 1) * shared.dim.lambda_s.mult[1]] + internal.lambda_hc[i - 1 + (j - 1) * shared.dim.lambda_hc.mult[1]] + shared.lambda_z[i - 1 + (j - 1) * shared.dim.lambda_z.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S_children.size; ++i) {
      internal.n_vaccination_t_S_children[i - 1] = (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.children_dose1_group[i - 1], S[i - 1 + shared.dim.S.mult[1]] / (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]])), S[i - 1 + shared.dim.S.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S_adults.size; ++i) {
      internal.n_vaccination_t_S_adults[i - 1] = (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.adults_dose1_group[i - 1], S[i - 1 + shared.dim.S.mult[1]] / (S[i - 1 + shared.dim.S.mult[1]] + Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]])), S[i - 1 + shared.dim.S.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.p_SE.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.p_SE.dim[1]; ++j) {
        internal.p_SE[i - 1 + (j - 1) * shared.dim.p_SE.mult[1]] = 1 - monty::math::exp(-internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] * dt);
      }
    }
    for (size_t i = 1; i <= shared.dim.p_hh.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.p_hh.dim[1]; ++j) {
        internal.p_hh[i - 1 + (j - 1) * shared.dim.p_hh.mult[1]] = (internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] > 0 ? internal.lambda_hh[i - 1 + (j - 1) * shared.dim.lambda_hh.mult[1]] / internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] : 0);
      }
    }
    for (size_t i = 1; i <= shared.dim.p_s.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.p_s.dim[1]; ++j) {
        internal.p_s[i - 1 + (j - 1) * shared.dim.p_s.mult[1]] = (internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] > 0 ? internal.lambda_s[i - 1 + (j - 1) * shared.dim.lambda_s.mult[1]] / internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] : 0);
      }
    }
    for (size_t i = 1; i <= shared.dim.p_hc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.p_hc.dim[1]; ++j) {
        internal.p_hc[i - 1 + (j - 1) * shared.dim.p_hc.mult[1]] = (internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] > 0 ? internal.lambda_hc[i - 1 + (j - 1) * shared.dim.lambda_hc.mult[1]] / internal.lambda[i - 1 + (j - 1) * shared.dim.lambda.mult[1]] : 0);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea_children.size; ++i) {
      internal.n_vaccination_t_Ea_children[i - 1] = (Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.children_dose1_group[i - 1] - internal.n_vaccination_t_S_children[i - 1], Ea[i - 1 + shared.dim.Ea.mult[1]] / (Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]])), Ea[i - 1 + shared.dim.Ea.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea_adults.size; ++i) {
      internal.n_vaccination_t_Ea_adults[i - 1] = (Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.adults_dose1_group[i - 1] - internal.n_vaccination_t_S_adults[i - 1], Ea[i - 1 + shared.dim.Ea.mult[1]] / (Ea[i - 1 + shared.dim.Ea.mult[1]] + Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]])), Ea[i - 1 + shared.dim.Ea.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_S.dim[1]; ++j) {
        internal.n_vaccination_t_S[i - 1 + (j - 1) * shared.dim.n_vaccination_t_S.mult[1]] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S.dim[0]; ++i) {
      internal.n_vaccination_t_S[i - 1 + shared.dim.n_vaccination_t_S.mult[1]] = internal.n_vaccination_t_S_children[i - 1] + internal.n_vaccination_t_S_adults[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_S.dim[0]; ++i) {
      internal.n_vaccination_t_S[i - 1 + 2 * shared.dim.n_vaccination_t_S.mult[1]] = (S[i - 1 + 2 * shared.dim.S.mult[1]] + Ea[i - 1 + 2 * shared.dim.Ea.mult[1]] + Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.adults_dose2_group[i - 1], S[i - 1 + 2 * shared.dim.S.mult[1]] / (S[i - 1 + 2 * shared.dim.S.mult[1]] + Ea[i - 1 + 2 * shared.dim.Ea.mult[1]] + Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]])), S[i - 1 + 2 * shared.dim.S.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb_children.size; ++i) {
      internal.n_vaccination_t_Eb_children[i - 1] = (Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.children_dose1_group[i - 1] - internal.n_vaccination_t_S_children[i - 1] - internal.n_vaccination_t_Ea_children[i - 1], Eb[i - 1 + shared.dim.Eb.mult[1]] / (Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]])), Eb[i - 1 + shared.dim.Eb.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb_adults.size; ++i) {
      internal.n_vaccination_t_Eb_adults[i - 1] = (Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.adults_dose1_group[i - 1] - internal.n_vaccination_t_S_adults[i - 1] - internal.n_vaccination_t_Ea_adults[i - 1], Eb[i - 1 + shared.dim.Eb.mult[1]] / (Eb[i - 1 + shared.dim.Eb.mult[1]] + R[i - 1 + shared.dim.R.mult[1]])), Eb[i - 1 + shared.dim.Eb.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_Ea.dim[1]; ++j) {
        internal.n_vaccination_t_Ea[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Ea.mult[1]] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea.dim[0]; ++i) {
      internal.n_vaccination_t_Ea[i - 1 + shared.dim.n_vaccination_t_Ea.mult[1]] = internal.n_vaccination_t_Ea_children[i - 1] + internal.n_vaccination_t_Ea_adults[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Ea.dim[0]; ++i) {
      internal.n_vaccination_t_Ea[i - 1 + 2 * shared.dim.n_vaccination_t_Ea.mult[1]] = (Ea[i - 1 + 2 * shared.dim.Ea.mult[1]] + Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.adults_dose2_group[i - 1] - internal.n_vaccination_t_S[i - 1 + 2 * shared.dim.n_vaccination_t_S.mult[1]], Ea[i - 1 + 2 * shared.dim.Ea.mult[1]] / (Ea[i - 1 + 2 * shared.dim.Ea.mult[1]] + Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]])), Ea[i - 1 + 2 * shared.dim.Ea.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.delta_S_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_S_n_vaccination.dim[1]; ++j) {
        internal.delta_S_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_S_n_vaccination.mult[1]] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_S[i - 1 + (j - 1) * shared.dim.n_vaccination_t_S.mult[1]]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_S[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_S.mult[1]]) : (-internal.n_vaccination_t_S[i - 1 + (j - 1) * shared.dim.n_vaccination_t_S.mult[1]] + internal.n_vaccination_t_S[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_S.mult[1]]))));
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R_children.size; ++i) {
      internal.n_vaccination_t_R_children[i - 1] = (R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(internal.children_dose1_group[i - 1] - internal.n_vaccination_t_S_children[i - 1] - internal.n_vaccination_t_Ea_children[i - 1] - internal.n_vaccination_t_Eb_children[i - 1], R[i - 1 + shared.dim.R.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R_adults.size; ++i) {
      internal.n_vaccination_t_R_adults[i - 1] = (R[i - 1 + shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(internal.adults_dose1_group[i - 1] - internal.n_vaccination_t_S_adults[i - 1] - internal.n_vaccination_t_Ea_adults[i - 1] - internal.n_vaccination_t_Eb_adults[i - 1], R[i - 1 + shared.dim.R.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_Eb.dim[1]; ++j) {
        internal.n_vaccination_t_Eb[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Eb.mult[1]] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb.dim[0]; ++i) {
      internal.n_vaccination_t_Eb[i - 1 + shared.dim.n_vaccination_t_Eb.mult[1]] = internal.n_vaccination_t_Eb_children[i - 1] + internal.n_vaccination_t_Eb_adults[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_Eb.dim[0]; ++i) {
      internal.n_vaccination_t_Eb[i - 1 + 2 * shared.dim.n_vaccination_t_Eb.mult[1]] = (Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(monty::random::binomial<real_type>(rng_state, internal.adults_dose2_group[i - 1] - internal.n_vaccination_t_S[i - 1 + 2 * shared.dim.n_vaccination_t_S.mult[1]] - internal.n_vaccination_t_Ea[i - 1 + 2 * shared.dim.n_vaccination_t_Ea.mult[1]], Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] / (Eb[i - 1 + 2 * shared.dim.Eb.mult[1]] + R[i - 1 + 2 * shared.dim.R.mult[1]])), Eb[i - 1 + 2 * shared.dim.Eb.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.delta_Ea_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Ea_n_vaccination.dim[1]; ++j) {
        internal.delta_Ea_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_Ea_n_vaccination.mult[1]] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_Ea[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Ea.mult[1]]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_Ea[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_Ea.mult[1]]) : (-internal.n_vaccination_t_Ea[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Ea.mult[1]] + internal.n_vaccination_t_Ea[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_Ea.mult[1]]))));
      }
    }
    for (size_t i = 1; i <= shared.dim.n_SEa.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_SEa.dim[1]; ++j) {
        internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]] = monty::random::binomial<real_type>(rng_state, S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + internal.delta_S_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_S_n_vaccination.mult[1]], internal.p_SE[i - 1 + (j - 1) * shared.dim.p_SE.mult[1]]);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t_R.dim[1]; ++j) {
        internal.n_vaccination_t_R[i - 1 + (j - 1) * shared.dim.n_vaccination_t_R.mult[1]] = 0;
      }
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R.dim[0]; ++i) {
      internal.n_vaccination_t_R[i - 1 + shared.dim.n_vaccination_t_R.mult[1]] = internal.n_vaccination_t_R_children[i - 1] + internal.n_vaccination_t_R_adults[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.n_vaccination_t_R.dim[0]; ++i) {
      internal.n_vaccination_t_R[i - 1 + 2 * shared.dim.n_vaccination_t_R.mult[1]] = (R[i - 1 + 2 * shared.dim.R.mult[1]] == 0 ? 0 : monty::math::min(internal.adults_dose2_group[i - 1] - internal.n_vaccination_t_S[i - 1 + 2 * shared.dim.n_vaccination_t_S.mult[1]] - internal.n_vaccination_t_Ea[i - 1 + 2 * shared.dim.n_vaccination_t_Ea.mult[1]] - internal.n_vaccination_t_Eb[i - 1 + 2 * shared.dim.n_vaccination_t_Eb.mult[1]], R[i - 1 + 2 * shared.dim.R.mult[1]]));
    }
    for (size_t i = 1; i <= shared.dim.delta_Eb_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Eb_n_vaccination.dim[1]; ++j) {
        internal.delta_Eb_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_Eb_n_vaccination.mult[1]] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_Eb[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Eb.mult[1]]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_Eb[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_Eb.mult[1]]) : (-internal.n_vaccination_t_Eb[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Eb.mult[1]] + internal.n_vaccination_t_Eb[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_Eb.mult[1]]))));
      }
    }
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        internal.new_S[i - 1 + (j - 1) * shared.dim.S.mult[1]] = S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + internal.delta_S_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_S_n_vaccination.mult[1]] - internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]];
      }
    }
    const real_type new_cases_00_04 = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {0, 0}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_SW_12_14 = monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {16, 16}, {0, shared.dim.n_SEa.dim[1] - 1}), static_cast<real_type>(0.5));
    const real_type new_cases_CSW = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {16, 16}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_ASW = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {17, 17}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_PBS = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {18, 18}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_HCW = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {19, 19}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_inc = cases_inc + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa);
    for (size_t i = 1; i <= shared.dim.n_SEa_hh.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_SEa_hh.dim[1]; ++j) {
        internal.n_SEa_hh[i - 1 + (j - 1) * shared.dim.n_SEa_hh.mult[1]] = monty::random::binomial<real_type>(rng_state, internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]], internal.p_hh[i - 1 + (j - 1) * shared.dim.p_hh.mult[1]]);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EaEb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EaEb.dim[1]; ++j) {
        internal.n_EaEb[i - 1 + (j - 1) * shared.dim.n_EaEb.mult[1]] = monty::random::binomial<real_type>(rng_state, Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]] + internal.delta_Ea_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_Ea_n_vaccination.mult[1]], p_EE);
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_R_n_vaccination.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_R_n_vaccination.dim[1]; ++j) {
        internal.delta_R_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_R_n_vaccination.mult[1]] = (j == 1 ? 0 : (j == 2 ? (-internal.n_vaccination_t_R[i - 1 + (j - 1) * shared.dim.n_vaccination_t_R.mult[1]]) : (static_cast<int>(j) == shared.n_vax ? (internal.n_vaccination_t_R[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_R.mult[1]]) : (-internal.n_vaccination_t_R[i - 1 + (j - 1) * shared.dim.n_vaccination_t_R.mult[1]] + internal.n_vaccination_t_R[i - 1 + (j - 1 - 1) * shared.dim.n_vaccination_t_R.mult[1]]))));
      }
    }
    const real_type new_cases_SW_15_17 = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {16, 16}, {0, shared.dim.n_SEa.dim[1] - 1}) - new_cases_SW_12_14;
    const real_type new_cases_05_14 = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {1, 2}, {0, shared.dim.n_SEa.dim[1] - 1}) + new_cases_SW_12_14;
    const real_type new_cases_SW = new_cases_CSW + new_cases_ASW;
    const real_type new_cases_inc_00_04 = cases_inc_00_04 + new_cases_00_04;
    for (size_t i = 1; i <= shared.dim.n_vaccination_t.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_vaccination_t.dim[1]; ++j) {
        internal.n_vaccination_t[i - 1 + (j - 1) * shared.dim.n_vaccination_t.mult[1]] = internal.n_vaccination_t_S[i - 1 + (j - 1) * shared.dim.n_vaccination_t_S.mult[1]] + internal.n_vaccination_t_Ea[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Ea.mult[1]] + internal.n_vaccination_t_Eb[i - 1 + (j - 1) * shared.dim.n_vaccination_t_Eb.mult[1]] + internal.n_vaccination_t_R[i - 1 + (j - 1) * shared.dim.n_vaccination_t_R.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.n_SEa_s.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_SEa_s.dim[1]; ++j) {
        internal.n_SEa_s[i - 1 + (j - 1) * shared.dim.n_SEa_s.mult[1]] = monty::random::binomial<real_type>(rng_state, internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]] - internal.n_SEa_hh[i - 1 + (j - 1) * shared.dim.n_SEa_hh.mult[1]], internal.p_s[i - 1 + (j - 1) * shared.dim.p_s.mult[1]]);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EbI.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EbI.dim[1]; ++j) {
        internal.n_EbI[i - 1 + (j - 1) * shared.dim.n_EbI.mult[1]] = monty::random::binomial<real_type>(rng_state, Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]] + internal.delta_Eb_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_Eb_n_vaccination.mult[1]], p_EI);
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Ea.dim[1]; ++j) {
        internal.delta_Ea[i - 1 + (j - 1) * shared.dim.delta_Ea.mult[1]] = internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]] - internal.n_EaEb[i - 1 + (j - 1) * shared.dim.n_EaEb.mult[1]];
      }
    }
    const real_type new_observed_cases_SW_12_14 = monty::random::binomial<real_type>(rng_state, new_cases_SW_12_14, shared.phi_CSW_12_14);
    const real_type new_observed_cases_ASW = monty::random::binomial<real_type>(rng_state, new_cases_ASW, shared.phi_ASW);
    const real_type new_observed_cases_PBS = monty::random::binomial<real_type>(rng_state, new_cases_PBS, shared.phi_PBS);
    const real_type new_observed_cases_HCW = monty::random::binomial<real_type>(rng_state, new_cases_HCW, shared.phi_HCW);
    const real_type new_observed_cases_00_04 = monty::random::binomial<real_type>(rng_state, new_cases_00_04, shared.phi_00_04);
    for (size_t i = 1; i <= shared.dim.Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ea.dim[1]; ++j) {
        internal.new_Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]] = Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]] + internal.delta_Ea_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_Ea_n_vaccination.mult[1]] + internal.delta_Ea[i - 1 + (j - 1) * shared.dim.delta_Ea.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        internal.new_R[i - 1 + (j - 1) * shared.dim.R.mult[1]] = R[i - 1 + (j - 1) * shared.dim.R.mult[1]] + internal.delta_R_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_R_n_vaccination.mult[1]] + internal.delta_R[i - 1 + (j - 1) * shared.dim.delta_R.mult[1]];
      }
    }
    const real_type new_cases_15_plus = dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {3, 15}, {0, shared.dim.n_SEa.dim[1] - 1}) + new_cases_SW_15_17 + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {17, 19}, {0, shared.dim.n_SEa.dim[1] - 1});
    const real_type new_cases_inc_05_14 = cases_inc_05_14 + new_cases_05_14;
    const real_type new_dose1 = dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {0, shared.dim.n_vaccination_t.dim[0] - 1}, {1, 1});
    const real_type new_dose1_00_04 = internal.n_vaccination_t[shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose1_SW_12_14 = monty::math::round(internal.n_vaccination_t[16 + shared.dim.n_vaccination_t.mult[1]] * static_cast<real_type>(0.5));
    const real_type new_dose1_CSW = internal.n_vaccination_t[16 + shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose1_ASW = internal.n_vaccination_t[17 + shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose1_PBS = internal.n_vaccination_t[18 + shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose1_HCW = internal.n_vaccination_t[19 + shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose2 = dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {0, shared.dim.n_vaccination_t.dim[0] - 1}, {2, 2});
    const real_type new_dose2_00_04 = internal.n_vaccination_t[2 * shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose2_SW_12_14 = monty::math::round(internal.n_vaccination_t[16 + 2 * shared.dim.n_vaccination_t.mult[1]] * static_cast<real_type>(0.5));
    const real_type new_dose2_CSW = internal.n_vaccination_t[16 + 2 * shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose2_ASW = internal.n_vaccination_t[17 + 2 * shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose2_PBS = internal.n_vaccination_t[18 + 2 * shared.dim.n_vaccination_t.mult[1]];
    const real_type new_dose2_HCW = internal.n_vaccination_t[19 + 2 * shared.dim.n_vaccination_t.mult[1]];
    for (size_t i = 1; i <= shared.dim.n_SEa_hc.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_SEa_hc.dim[1]; ++j) {
        internal.n_SEa_hc[i - 1 + (j - 1) * shared.dim.n_SEa_hc.mult[1]] = monty::random::binomial<real_type>(rng_state, internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]] - internal.n_SEa_hh[i - 1 + (j - 1) * shared.dim.n_SEa_hh.mult[1]] - internal.n_SEa_s[i - 1 + (j - 1) * shared.dim.n_SEa_s.mult[1]], internal.p_hc[i - 1 + (j - 1) * shared.dim.p_hc.mult[1]]);
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EbId.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EbId.dim[1]; ++j) {
        internal.n_EbId[i - 1 + (j - 1) * shared.dim.n_EbId.mult[1]] = monty::random::binomial<real_type>(rng_state, internal.n_EbI[i - 1 + (j - 1) * shared.dim.n_EbI.mult[1]], shared.CFR[i - 1 + (j - 1) * shared.dim.CFR.mult[1]]);
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Eb.dim[1]; ++j) {
        internal.delta_Eb[i - 1 + (j - 1) * shared.dim.delta_Eb.mult[1]] = internal.n_EaEb[i - 1 + (j - 1) * shared.dim.n_EaEb.mult[1]] - internal.n_EbI[i - 1 + (j - 1) * shared.dim.n_EbI.mult[1]];
      }
    }
    const real_type new_observed_cases_SW_15_17 = monty::random::binomial<real_type>(rng_state, new_cases_SW_15_17, shared.phi_CSW_15_17);
    const real_type new_observed_cases_05_14 = monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {1, 2}, {0, shared.dim.n_SEa.dim[1] - 1}), shared.phi_05_14) + new_observed_cases_SW_12_14;
    for (size_t i = 1; i <= shared.dim.Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Eb.dim[1]; ++j) {
        internal.new_Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]] = Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]] + internal.delta_Eb_n_vaccination[i - 1 + (j - 1) * shared.dim.delta_Eb_n_vaccination.mult[1]] + internal.delta_Eb[i - 1 + (j - 1) * shared.dim.delta_Eb.mult[1]];
      }
    }
    const real_type new_cases_inc_15_plus = cases_inc_15_plus + new_cases_15_plus;
    const real_type new_dose1_SW_15_17 = internal.n_vaccination_t[16 + shared.dim.n_vaccination_t.mult[1]] - new_dose1_SW_12_14;
    const real_type new_dose1_05_14 = dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {1, 2}, {1, 1}) + new_dose1_SW_12_14;
    const real_type new_dose1_SW = new_dose1_CSW + new_dose1_ASW;
    const real_type new_dose2_SW_15_17 = internal.n_vaccination_t[16 + 2 * shared.dim.n_vaccination_t.mult[1]] - new_dose2_SW_12_14;
    const real_type new_dose2_05_14 = dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {1, 2}, {2, 2}) + new_dose2_SW_12_14;
    const real_type new_dose2_SW = new_dose2_CSW + new_dose2_ASW;
    for (size_t i = 1; i <= shared.dim.n_SEa_z.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_SEa_z.dim[1]; ++j) {
        internal.n_SEa_z[i - 1 + (j - 1) * shared.dim.n_SEa_z.mult[1]] = internal.n_SEa[i - 1 + (j - 1) * shared.dim.n_SEa.mult[1]] - internal.n_SEa_hh[i - 1 + (j - 1) * shared.dim.n_SEa_hh.mult[1]] - internal.n_SEa_s[i - 1 + (j - 1) * shared.dim.n_SEa_s.mult[1]] - internal.n_SEa_hc[i - 1 + (j - 1) * shared.dim.n_SEa_hc.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.n_EbIr.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.n_EbIr.dim[1]; ++j) {
        internal.n_EbIr[i - 1 + (j - 1) * shared.dim.n_EbIr.mult[1]] = internal.n_EbI[i - 1 + (j - 1) * shared.dim.n_EbI.mult[1]] - internal.n_EbId[i - 1 + (j - 1) * shared.dim.n_EbId.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.delta_Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Id.dim[1]; ++j) {
        internal.delta_Id[i - 1 + (j - 1) * shared.dim.delta_Id.mult[1]] = internal.n_EbId[i - 1 + (j - 1) * shared.dim.n_EbId.mult[1]] - internal.n_IdD[i - 1 + (j - 1) * shared.dim.n_IdD.mult[1]];
      }
    }
    const real_type new_observed_cases_15_plus = monty::random::binomial<real_type>(rng_state, dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {3, 15}, {0, shared.dim.n_SEa.dim[1] - 1}), shared.phi_15_plus) + new_observed_cases_SW_15_17 + new_observed_cases_ASW + new_observed_cases_PBS + new_observed_cases_HCW;
    for (size_t i = 1; i <= shared.dim.Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Id.dim[1]; ++j) {
        internal.new_Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]] = Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]] + internal.delta_Id[i - 1 + (j - 1) * shared.dim.delta_Id.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        internal.new_E[i - 1 + (j - 1) * shared.dim.E.mult[1]] = internal.new_Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]] + internal.new_Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]];
      }
    }
    const real_type new_dose1_15_plus = dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {3, 15}, {1, 1}) + new_dose1_SW_15_17 + dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {17, 19}, {1, 1});
    const real_type new_dose2_15_plus = dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {3, 15}, {2, 2}) + new_dose2_SW_15_17 + dust2::array::sum<real_type>(internal.n_vaccination_t.data(), shared.dim.n_vaccination_t, {17, 19}, {2, 2});
    for (size_t i = 1; i <= shared.dim.delta_Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.delta_Ir.dim[1]; ++j) {
        internal.delta_Ir[i - 1 + (j - 1) * shared.dim.delta_Ir.mult[1]] = internal.n_EbIr[i - 1 + (j - 1) * shared.dim.n_EbIr.mult[1]] - internal.n_IrR[i - 1 + (j - 1) * shared.dim.n_IrR.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ir.dim[1]; ++j) {
        internal.new_Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]] = Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]] + internal.delta_Ir[i - 1 + (j - 1) * shared.dim.delta_Ir.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        internal.new_I[i - 1 + (j - 1) * shared.dim.I.mult[1]] = internal.new_Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]] + internal.new_Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.N.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.N.dim[1]; ++j) {
        internal.new_N[i - 1 + (j - 1) * shared.dim.N.mult[1]] = internal.new_S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + internal.new_Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]] + internal.new_Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]] + internal.new_Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]] + internal.new_Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]] + internal.new_R[i - 1 + (j - 1) * shared.dim.R.mult[1]] + internal.new_D[i - 1 + (j - 1) * shared.dim.D.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.A.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.A.dim[1]; ++j) {
        internal.new_A[i - 1 + (j - 1) * shared.dim.A.mult[1]] = internal.new_S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + internal.new_Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]] + internal.new_Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]] + internal.new_Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]] + internal.new_Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]] + internal.new_R[i - 1 + (j - 1) * shared.dim.R.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.new_target_met_children_t.size; ++i) {
      internal.new_target_met_children_t[i - 1] = 0;
    }
    for (size_t i = 1; i <= shared.dim.new_target_met_children_t.size; ++i) {
      internal.new_target_met_children_t[i - 1] = ((dust2::array::sum<real_type>(internal.new_N.data(), shared.dim.N, {i - 1, i - 1}, {2, 3}) * shared.is_child[i - 1]) > shared.prioritisation_strategy_children[i - 1 + (prioritisation_step_1st_dose_children - 1) * shared.dim.prioritisation_strategy_children.mult[1]] * dust2::array::sum<real_type>(internal.new_N.data(), shared.dim.N, {i - 1, i - 1}, {1, 3}));
    }
    const real_type new_prioritisation_step_1st_dose_children = (dust2::array::sum<real_type>(internal.new_target_met_children_t.data(), shared.dim.new_target_met_children_t) == dust2::array::sum<real_type>(internal.coverage_target_1st_dose_children.data(), shared.dim.coverage_target_1st_dose_children) ? monty::math::min(prioritisation_step_1st_dose_children + 1, shared.N_prioritisation_steps_children) : prioritisation_step_1st_dose_children);
    state_next[0] = new_prioritisation_step_1st_dose_children;
    state_next[1] = (prioritisation_step_1st_dose_adults_proposal > shared.N_prioritisation_steps_adults ? shared.N_prioritisation_steps_adults : prioritisation_step_1st_dose_adults_proposal);
    state_next[2] = (prioritisation_step_2nd_dose_adults_proposal > shared.N_prioritisation_steps_adults ? shared.N_prioritisation_steps_adults : prioritisation_step_2nd_dose_adults_proposal);
    state_next[79] = dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S);
    state_next[80] = dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea);
    state_next[81] = dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb);
    state_next[82] = dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R);
    state_next[83] = dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S, {0, shared.dim.n_vaccination_t_S.dim[0] - 1}, {1, 1});
    state_next[84] = dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea, {0, shared.dim.n_vaccination_t_Ea.dim[0] - 1}, {1, 1});
    state_next[85] = dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb, {0, shared.dim.n_vaccination_t_Eb.dim[0] - 1}, {1, 1});
    state_next[86] = dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R, {0, shared.dim.n_vaccination_t_R.dim[0] - 1}, {1, 1});
    state_next[87] = dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S, {0, shared.dim.n_vaccination_t_S.dim[0] - 1}, {2, 2});
    state_next[88] = dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea, {0, shared.dim.n_vaccination_t_Ea.dim[0] - 1}, {2, 2});
    state_next[89] = dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb, {0, shared.dim.n_vaccination_t_Eb.dim[0] - 1}, {2, 2});
    state_next[90] = dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R, {0, shared.dim.n_vaccination_t_R.dim[0] - 1}, {2, 2});
    for (size_t i = 1; i <= shared.dim.S.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.S.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.S.mult[1] + 109] = internal.new_S[i - 1 + (j - 1) * shared.dim.S.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ea.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ea.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.Ea.mult[1] + shared.odin.offset.state[110]] = internal.new_Ea[i - 1 + (j - 1) * shared.dim.Ea.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Eb.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Eb.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.Eb.mult[1] + shared.odin.offset.state[111]] = internal.new_Eb[i - 1 + (j - 1) * shared.dim.Eb.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Ir.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Ir.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.Ir.mult[1] + shared.odin.offset.state[112]] = internal.new_Ir[i - 1 + (j - 1) * shared.dim.Ir.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.Id.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.Id.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.Id.mult[1] + shared.odin.offset.state[113]] = internal.new_Id[i - 1 + (j - 1) * shared.dim.Id.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.R.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.R.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R.mult[1] + shared.odin.offset.state[114]] = internal.new_R[i - 1 + (j - 1) * shared.dim.R.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.D.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.D.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.D.mult[1] + shared.odin.offset.state[115]] = internal.new_D[i - 1 + (j - 1) * shared.dim.D.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.E.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.E.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.E.mult[1] + shared.odin.offset.state[116]] = internal.new_E[i - 1 + (j - 1) * shared.dim.E.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.I.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.I.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.I.mult[1] + shared.odin.offset.state[117]] = internal.new_I[i - 1 + (j - 1) * shared.dim.I.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.N.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.N.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.N.mult[1] + shared.odin.offset.state[118]] = internal.new_N[i - 1 + (j - 1) * shared.dim.N.mult[1]];
      }
    }
    for (size_t i = 1; i <= shared.dim.A.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.A.dim[1]; ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.A.mult[1] + shared.odin.offset.state[119]] = internal.new_A[i - 1 + (j - 1) * shared.dim.A.mult[1]];
      }
    }
    state_next[7] = cases_cumulative_hh + dust2::array::sum<real_type>(internal.n_SEa_hh.data(), shared.dim.n_SEa_hh);
    state_next[8] = cases_cumulative_s + dust2::array::sum<real_type>(internal.n_SEa_s.data(), shared.dim.n_SEa_s);
    state_next[9] = cases_cumulative_z + dust2::array::sum<real_type>(internal.n_SEa_z.data(), shared.dim.n_SEa_z);
    state_next[10] = cases_cumulative_hc + dust2::array::sum<real_type>(internal.n_SEa_hc.data(), shared.dim.n_SEa_hc);
    state_next[3] = new_cases_inc;
    state_next[11] = new_cases_inc_00_04;
    state_next[12] = new_cases_inc_05_14;
    state_next[13] = new_cases_inc_15_plus;
    state_next[15] = cases_inc_CSW + new_cases_CSW;
    state_next[16] = cases_inc_ASW + new_cases_ASW;
    state_next[17] = cases_inc_SW + new_cases_SW;
    state_next[14] = cases_inc_PBS + new_cases_PBS;
    state_next[18] = cases_inc_HCW + new_cases_HCW;
    for (size_t i = 1; i <= shared.dim.cases_cumulative_by_age.size; ++i) {
      state_next[i - 1 + shared.odin.offset.state[120]] = cases_cumulative_by_age[i - 1] + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa, {i - 1, i - 1}, {0, shared.dim.n_SEa.dim[1] - 1});
    }
    state_next[5] = cases_cumulative + dust2::array::sum<real_type>(internal.n_SEa.data(), shared.dim.n_SEa);
    state_next[45] = cases_cumulative_00_04 + new_cases_00_04;
    state_next[46] = cases_cumulative_05_14 + new_cases_05_14;
    state_next[47] = cases_cumulative_15_plus + new_cases_15_plus;
    state_next[49] = cases_cumulative_CSW + new_cases_CSW;
    state_next[50] = cases_cumulative_ASW + new_cases_ASW;
    state_next[51] = cases_cumulative_SW + new_cases_SW;
    state_next[48] = cases_cumulative_PBS + new_cases_PBS;
    state_next[52] = cases_cumulative_HCW + new_cases_HCW;
    state_next[4] = deaths_inc + dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD);
    state_next[19] = deaths_inc_00_04 + new_deaths_00_04;
    state_next[20] = deaths_inc_05_14 + new_deaths_05_14;
    state_next[21] = deaths_inc_15_plus + new_deaths_15_plus;
    state_next[23] = deaths_inc_CSW + new_deaths_CSW;
    state_next[24] = deaths_inc_ASW + new_deaths_ASW;
    state_next[25] = deaths_inc_SW + new_deaths_SW;
    state_next[22] = deaths_inc_PBS + new_deaths_PBS;
    state_next[26] = deaths_inc_HCW + new_deaths_HCW;
    state_next[6] = deaths_cumulative + dust2::array::sum<real_type>(internal.n_IdD.data(), shared.dim.n_IdD);
    state_next[53] = deaths_cumulative_00_04 + new_deaths_00_04;
    state_next[54] = deaths_cumulative_05_14 + new_deaths_05_14;
    state_next[55] = deaths_cumulative_15_plus + new_deaths_15_plus;
    state_next[57] = deaths_cumulative_CSW + new_deaths_CSW;
    state_next[58] = deaths_cumulative_ASW + new_deaths_ASW;
    state_next[59] = deaths_cumulative_SW + new_deaths_SW;
    state_next[56] = deaths_cumulative_PBS + new_deaths_PBS;
    state_next[60] = deaths_cumulative_HCW + new_deaths_HCW;
    state_next[91] = dust2::array::sum<real_type>(internal.new_S.data(), shared.dim.S);
    state_next[92] = dust2::array::sum<real_type>(internal.new_E.data(), shared.dim.E);
    state_next[93] = dust2::array::sum<real_type>(internal.new_I.data(), shared.dim.I);
    state_next[94] = dust2::array::sum<real_type>(internal.new_R.data(), shared.dim.R);
    state_next[95] = dust2::array::sum<real_type>(internal.new_D.data(), shared.dim.D);
    state_next[96] = dust2::array::sum<real_type>(internal.new_N.data(), shared.dim.N);
    state_next[97] = total_vax + dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S) + dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea) + dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb) + dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R);
    state_next[98] = total_vax_1stdose + dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S, {0, shared.dim.n_vaccination_t_S.dim[0] - 1}, {1, 1}) + dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea, {0, shared.dim.n_vaccination_t_Ea.dim[0] - 1}, {1, 1}) + dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb, {0, shared.dim.n_vaccination_t_Eb.dim[0] - 1}, {1, 1}) + dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R, {0, shared.dim.n_vaccination_t_R.dim[0] - 1}, {1, 1});
    state_next[99] = total_vax_2nddose + dust2::array::sum<real_type>(internal.n_vaccination_t_S.data(), shared.dim.n_vaccination_t_S, {0, shared.dim.n_vaccination_t_S.dim[0] - 1}, {2, 2}) + dust2::array::sum<real_type>(internal.n_vaccination_t_Ea.data(), shared.dim.n_vaccination_t_Ea, {0, shared.dim.n_vaccination_t_Ea.dim[0] - 1}, {2, 2}) + dust2::array::sum<real_type>(internal.n_vaccination_t_Eb.data(), shared.dim.n_vaccination_t_Eb, {0, shared.dim.n_vaccination_t_Eb.dim[0] - 1}, {2, 2}) + dust2::array::sum<real_type>(internal.n_vaccination_t_R.data(), shared.dim.n_vaccination_t_R, {0, shared.dim.n_vaccination_t_R.dim[0] - 1}, {2, 2});
    state_next[27] = dose1_inc + new_dose1;
    state_next[28] = dose1_inc_00_04 + new_dose1_00_04;
    state_next[29] = dose1_inc_05_14 + new_dose1_05_14;
    state_next[30] = dose1_inc_15_plus + new_dose1_15_plus;
    state_next[34] = dose1_inc_SW + new_dose1_SW;
    state_next[32] = dose1_inc_CSW + new_dose1_CSW;
    state_next[33] = dose1_inc_ASW + new_dose1_ASW;
    state_next[31] = dose1_inc_PBS + new_dose1_PBS;
    state_next[35] = dose1_inc_HCW + new_dose1_HCW;
    state_next[36] = dose2_inc + new_dose2;
    state_next[37] = dose2_inc_00_04 + new_dose2_00_04;
    state_next[38] = dose2_inc_05_14 + new_dose2_05_14;
    state_next[39] = dose2_inc_15_plus + new_dose2_15_plus;
    state_next[43] = dose2_inc_SW + new_dose2_SW;
    state_next[41] = dose2_inc_CSW + new_dose2_CSW;
    state_next[42] = dose2_inc_ASW + new_dose2_ASW;
    state_next[40] = dose2_inc_PBS + new_dose2_PBS;
    state_next[44] = dose2_inc_HCW + new_dose2_HCW;
    state_next[61] = dose1_cumulative + new_dose1;
    state_next[62] = dose1_cumulative_00_04 + new_dose1_00_04;
    state_next[63] = dose1_cumulative_05_14 + new_dose1_05_14;
    state_next[64] = dose1_cumulative_15_plus + new_dose1_15_plus;
    state_next[66] = dose1_cumulative_CSW + new_dose1_CSW;
    state_next[67] = dose1_cumulative_ASW + new_dose1_ASW;
    state_next[68] = dose1_cumulative_SW + new_dose1_SW;
    state_next[65] = dose1_cumulative_PBS + new_dose1_PBS;
    state_next[69] = dose1_cumulative_HCW + new_dose1_HCW;
    state_next[70] = dose2_cumulative + new_dose2;
    state_next[71] = dose2_cumulative_00_04 + new_dose2_00_04;
    state_next[72] = dose2_cumulative_05_14 + new_dose2_05_14;
    state_next[73] = dose2_cumulative_15_plus + new_dose2_15_plus;
    state_next[75] = dose2_cumulative_CSW + new_dose2_CSW;
    state_next[76] = dose2_cumulative_ASW + new_dose2_ASW;
    state_next[77] = dose2_cumulative_SW + new_dose2_SW;
    state_next[74] = dose2_cumulative_PBS + new_dose2_PBS;
    state_next[78] = dose2_cumulative_HCW + new_dose2_HCW;
    state_next[100] = observed_cases_inc_00_04 + new_observed_cases_00_04;
    state_next[101] = observed_cases_inc_05_14 + new_observed_cases_05_14;
    state_next[102] = observed_cases_inc_15_plus + new_observed_cases_15_plus;
    state_next[103] = observed_cases_inc_CSW + new_observed_cases_SW_12_14 + new_observed_cases_SW_15_17;
    state_next[104] = observed_cases_inc_ASW + new_observed_cases_ASW;
    state_next[105] = observed_cases_inc_SW + new_observed_cases_SW_12_14 + new_observed_cases_SW_15_17 + new_observed_cases_ASW;
    state_next[106] = observed_cases_inc_PBS + new_observed_cases_PBS;
    state_next[107] = observed_cases_inc_HCW + new_observed_cases_HCW;
    state_next[108] = observed_cases_inc + new_observed_cases_00_04 + new_observed_cases_05_14 + new_observed_cases_15_plus;
  }
  static auto zero_every(const shared_state& shared) {
    return dust2::zero_every_type<real_type>{{7, {3}}, {7, {4}}, {7, {11}}, {7, {12}}, {7, {13}}, {7, {14}}, {7, {15}}, {7, {16}}, {7, {17}}, {7, {18}}, {7, {19}}, {7, {20}}, {7, {21}}, {7, {22}}, {7, {23}}, {7, {24}}, {7, {25}}, {7, {26}}, {7, {27}}, {7, {28}}, {7, {29}}, {7, {30}}, {7, {31}}, {7, {32}}, {7, {33}}, {7, {34}}, {7, {35}}, {7, {36}}, {7, {37}}, {7, {38}}, {7, {39}}, {7, {40}}, {7, {41}}, {7, {42}}, {7, {43}}, {7, {44}}, {7, {100}}, {7, {101}}, {7, {102}}, {7, {103}}, {7, {104}}, {7, {105}}, {7, {106}}, {7, {107}}, {7, {108}}};
  }
  static real_type compare_data(real_type time, const real_type* state, const data_type& data, const shared_state& shared, internal_state& internal, rng_state_type& rng_state) {
    const auto deaths_inc = state[4];
    const auto deaths_inc_00_04 = state[19];
    const auto deaths_inc_05_14 = state[20];
    const auto deaths_inc_15_plus = state[21];
    const auto cases_cumulative_00_04 = state[45];
    const auto cases_cumulative_05_14 = state[46];
    const auto cases_cumulative_15_plus = state[47];
    const auto deaths_cumulative_00_04 = state[53];
    const auto deaths_cumulative_05_14 = state[54];
    const auto deaths_cumulative_15_plus = state[55];
    const auto observed_cases_inc_00_04 = state[100];
    const auto observed_cases_inc_05_14 = state[101];
    const auto observed_cases_inc_15_plus = state[102];
    const auto observed_cases_inc_SW = state[105];
    const auto observed_cases_inc_HCW = state[107];
    const auto observed_cases_inc = state[108];
    real_type odin_ll = 0;
    const real_type model_cases = observed_cases_inc + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_00_04 = observed_cases_inc_00_04 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_05_14 = observed_cases_inc_05_14 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_15_plus = observed_cases_inc_15_plus + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths = deaths_inc + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths_00_04 = deaths_inc_00_04 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths_05_14 = deaths_inc_05_14 + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_deaths_15_plus = deaths_inc_15_plus + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_HCW = observed_cases_inc_HCW + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_non_HCW = observed_cases_inc - observed_cases_inc_HCW + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_SW = observed_cases_inc_SW + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_cases_non_SW = observed_cases_inc - observed_cases_inc_SW + monty::random::exponential_rate<real_type>(rng_state, shared.exp_noise);
    const real_type model_prop_HCW = model_cases_HCW / (model_cases_HCW + model_cases_non_HCW);
    const real_type model_prop_SW = model_cases_SW / (model_cases_SW + model_cases_non_SW);
    const real_type model_cases_00_14 = model_cases_00_04 + model_cases_05_14;
    if (!std::isnan(data.cases)) {
      odin_ll += monty::density::negative_binomial_mu(data.cases, 1 / shared.alpha_cases, model_cases, true);
    }
    if (!std::isnan(data.cases_00_04)) {
      odin_ll += monty::density::negative_binomial_mu(data.cases_00_04, 1 / shared.alpha_cases_00_04, model_cases_00_04, true);
    }
    if (!std::isnan(data.cases_05_14)) {
      odin_ll += monty::density::negative_binomial_mu(data.cases_05_14, 1 / shared.alpha_cases_05_14, model_cases_05_14, true);
    }
    if (!std::isnan(data.cases_15_plus)) {
      odin_ll += monty::density::negative_binomial_mu(data.cases_15_plus, 1 / shared.alpha_cases_15_plus, model_cases_15_plus, true);
    }
    if (!std::isnan(data.deaths)) {
      odin_ll += monty::density::negative_binomial_mu(data.deaths, 1 / shared.alpha_deaths, model_deaths, true);
    }
    if (!std::isnan(data.deaths_00_04)) {
      odin_ll += monty::density::negative_binomial_mu(data.deaths_00_04, 1 / shared.alpha_deaths_00_04, model_deaths_00_04, true);
    }
    if (!std::isnan(data.deaths_05_14)) {
      odin_ll += monty::density::negative_binomial_mu(data.deaths_05_14, 1 / shared.alpha_deaths_05_14, model_deaths_05_14, true);
    }
    if (!std::isnan(data.deaths_15_plus)) {
      odin_ll += monty::density::negative_binomial_mu(data.deaths_15_plus, 1 / shared.alpha_deaths_15_plus, model_deaths_15_plus, true);
    }
    if (!std::isnan(data.cfr_00_04)) {
      odin_ll += monty::density::beta(data.cfr_00_04, deaths_cumulative_00_04, cases_cumulative_00_04 - deaths_cumulative_00_04, true);
    }
    if (!std::isnan(data.cfr_05_14)) {
      odin_ll += monty::density::beta(data.cfr_05_14, deaths_cumulative_05_14, cases_cumulative_05_14 - deaths_cumulative_05_14, true);
    }
    if (!std::isnan(data.cfr_15_plus)) {
      odin_ll += monty::density::beta(data.cfr_15_plus, deaths_cumulative_15_plus, cases_cumulative_15_plus - deaths_cumulative_15_plus, true);
    }
    if (!std::isnan(data.cases_total) && !std::isnan(data.cases_HCW)) {
      odin_ll += monty::density::binomial(data.cases_HCW, data.cases_total, model_prop_HCW, true);
    }
    if (!std::isnan(data.cases_total) && !std::isnan(data.cases_SW)) {
      odin_ll += monty::density::binomial(data.cases_SW, data.cases_total, model_prop_SW, true);
    }
    if (!std::isnan(data.cases_00_14_binom) && !std::isnan(data.cases_00_04_binom)) {
      odin_ll += monty::density::beta_binomial_prob(data.cases_00_04_binom, data.cases_00_14_binom, model_cases_00_04 / model_cases_00_14, shared.rho_00_04, true);
    }
    if (!std::isnan(data.cases_binom) && !std::isnan(data.cases_00_14_binom)) {
      odin_ll += monty::density::beta_binomial_prob(data.cases_00_14_binom, data.cases_binom, model_cases_00_14 / model_cases, shared.rho_00_14, true);
    }
    return odin_ll;
  }
};
